import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as s,c as d,a as c,e as t,f as e,d as r,b as o}from"./app-c087d590.js";const g="/assets/image-20220617224427947-553d0e6e.png",h="/assets/image-20221201224603497-d404437c.png",p="/assets/image-20220823200024507-682e7b23.png",l="/assets/image-20221202111044434-8ef95de2.png",_="/assets/image-20221202111307819-82e0603d.png",f="/assets/image-20220823202344149-ab49b71f.png",b="/assets/1530625192392-1a23c10d.png",m="/assets/image-20220824233614686-b4ae7226.png",u={},T=t("h1",{id:"http协议",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#http协议","aria-hidden":"true"},"#"),e(" HTTP协议")],-1),x=o('<p>SpringFramework中提供很多实用功能<br> 如：依赖注入、事务管理、web开发支持、数据访问、消息服务等等。</p><figure><img src="'+g+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-web分析" tabindex="-1"><a class="header-anchor" href="#_1-web分析" aria-hidden="true">#</a> 1. Web分析</h2><figure><img src="'+h+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-http协议" tabindex="-1"><a class="header-anchor" href="#_2-http协议" aria-hidden="true">#</a> 2. HTTP协议</h2><h3 id="_2-1-http-概述" tabindex="-1"><a class="header-anchor" href="#_2-1-http-概述" aria-hidden="true">#</a> 2.1 HTTP-概述</h3><p><strong>介绍</strong>:</p><figure><img src="'+p+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>HTTP：Hyper Text Transfer Protocol（ 超文本传输协议 ），规定了浏览器与服务器之间数据传输的规则。</p><p>浏览器向服务器进行请求时：</p><figure><img src="'+l+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>服务器向浏览器进行响应时：</p><figure><img src="'+_+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container note"><p class="hint-container-title">特点</p><p><strong>基于TCP协议:</strong> 面向连接，安全</p><p><strong>基于请求-响应模型:</strong> 一次请求对应一次响应（先请求后响应）</p><p><strong>HTTP协议是无状态协议:</strong> 对于数据没有记忆能力。每次请求-响应都是独立的</p></div><h3 id="_2-2-http-请求协议" tabindex="-1"><a class="header-anchor" href="#_2-2-http-请求协议" aria-hidden="true">#</a> 2.2 HTTP-请求协议</h3><p><strong>浏览器</strong>和<strong>服务器</strong>是按照HTTP协议进行数据通信的。</p><p>HTTP协议又分为：请求协议和响应协议</p><ul><li>请求协议：浏览器将数据以请求格式发送到服务器 <ul><li>包括：<strong>请求行</strong>、<strong>请求头</strong> 、<strong>请求体</strong></li></ul></li><li>响应协议：服务器将数据以响应格式返回给浏览器 <ul><li>包括：<strong>响应行</strong> 、<strong>响应头</strong> 、<strong>响应体</strong></li></ul></li></ul><p>GET请求和POST请求的区别：</p><table><thead><tr><th>区别方式</th><th>GET请求</th><th>POST请求</th></tr></thead><tbody><tr><td>请求参数</td><td>请求参数在请求行中。<br>例：/brand/findAll?name=OPPO&amp;status=1</td><td>请求参数在请求体中</td></tr><tr><td>请求参数长度</td><td>请求参数长度有限制(浏览器不同限制也不同)</td><td>请求参数长度没有限制</td></tr><tr><td>安全性</td><td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td><td>安全性相对高</td></tr></tbody></table><h3 id="_2-3-http-响应协议" tabindex="-1"><a class="header-anchor" href="#_2-3-http-响应协议" aria-hidden="true">#</a> 2.3 HTTP-响应协议</h3><p>与HTTP的请求一样，HTTP响应的数据也分为3部分：<strong>响应行</strong>、<strong>响应头</strong> 、<strong>响应体</strong></p><figure><img src="'+f+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</p>',24),P={id:"响应状态码",tabindex:"-1"},H=t("a",{class:"header-anchor",href:"#响应状态码","aria-hidden":"true"},"#",-1),y={href:"https://cloud.tencent.com/developer/chapter/13553",target:"_blank",rel:"noopener noreferrer"},v=o('<table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong> --- 临时状态码。表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略</td></tr><tr><td>2xx</td><td><strong>成功</strong> --- 表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong> --- 重定向到其它地方，让客户端再发起一个请求以完成整个处理</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong> --- 处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong> --- 处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><h2 id="_3-web服务器-tomcat" tabindex="-1"><a class="header-anchor" href="#_3-web服务器-tomcat" aria-hidden="true">#</a> 3. WEB服务器-Tomcat</h2><h3 id="_3-1-服务器概述" tabindex="-1"><a class="header-anchor" href="#_3-1-服务器概述" aria-hidden="true">#</a> 3.1 服务器概述</h3><p><strong>服务器硬件</strong>:</p><p>服务器是提供计算服务的设备。</p><p>服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。</p><p>在网络环境下，根据服务器提供的服务类型不同，可分为：文件服务器，数据库服务器，应用程序服务器，WEB服务器等。</p><p><strong>服务器软件</strong>:</p><p>基于ServerSocket编写的程序</p><ul><li>服务器软件本质是一个运行在服务器设备上的应用程序</li><li>能够接收客户端请求，并根据请求给客户端响应数据</li></ul><figure><img src="'+b+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="web服务器" tabindex="-1"><a class="header-anchor" href="#web服务器" aria-hidden="true">#</a> Web服务器</h4><p>Web服务器是一个应用程序(软件)，对HTTP协议的操作进行封装。主要功能是&quot;提供网上信息浏览服务&quot;。</p><figure><img src="'+m+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure>',14),w={id:"tomcat",tabindex:"-1"},S=t("a",{class:"header-anchor",href:"#tomcat","aria-hidden":"true"},"#",-1),k={href:"https://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"},z=t("p",null,"Tomcat服务器软件是一个免费的开源的web应用服务器",-1),E=t("p",null,"因为Tomcat支持Servlet/JSP规范，所以Tomcat也被称为Web容器、Servlet容器。JavaWeb程序需要依赖Tomcat才能运行。",-1);function W(B,N){const a=i("ExternalLinkIcon");return s(),d("div",null,[T,c(" more "),x,t("h4",P,[H,e(),t("a",y,[e("响应状态码"),r(a)])]),v,t("h4",w,[S,e(),t("a",k,[e("Tomcat"),r(a)])]),z,E])}const C=n(u,[["render",W],["__file","javaweb02.html.vue"]]);export{C as default};
