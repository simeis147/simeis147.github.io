import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as i,c as r,b as e,d as l,e as s,a as o}from"./app-D_SFdkVG.js";const p={},c=o('<h1 id="数据库基础知识" tabindex="-1"><a class="header-anchor" href="#数据库基础知识"><span>数据库基础知识</span></a></h1><h2 id="什么是数据库-数据库管理系统-数据库系统" tabindex="-1"><a class="header-anchor" href="#什么是数据库-数据库管理系统-数据库系统"><span>什么是数据库, 数据库管理系统, 数据库系统?</span></a></h2><ul><li><p><strong>数据库</strong> : DataBase 简称 DB<br> 就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合</p></li><li><p><strong>数据库管理系统</strong> : Database Management System 简称 DBMS<br> 是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库</p></li><li><p><strong>数据库系统</strong> : Data Base System，简称 DBS<br> 通常由软件、数据库和数据管理员(DBA)组成</p></li></ul><h2 id="什么是元组-码-候选码-主码-外码-主属性-非主属性" tabindex="-1"><a class="header-anchor" href="#什么是元组-码-候选码-主码-外码-主属性-非主属性"><span>什么是元组, 码, 候选码, 主码, 外码, 主属性, 非主属性？</span></a></h2><ul><li><p><strong>元组</strong>：tuple 是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。 在二维表里，元组也称为行。</p></li><li><p><strong>码</strong>：码就是能唯一标识实体的属性，对应表中的列。</p></li><li><p><strong>候选码</strong>：若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何、子集都不能再标识，则称该属性组为候选码。例如：在学生实体中，“学号”是能唯一的区分学生实体的，同时又假设“姓名”、“班级”的属性组合足以区分学生实体，那么{学号}和{姓名，班级}都是候选码。</p></li><li><p><strong>主码</strong> : 主码也叫主键。主码是从候选码中选出来的。一个实体集中只能有一个主码，但可以有多个候选码。</p></li><li><p><strong>外码</strong> : 外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码。</p></li><li><p><strong>主属性</strong>：候选码中出现过的属性称为主属性。比如关系 工人（工号，身份证号，姓名，性别，部门）. 显然工号和身份证号都能够唯一标示这个关系，所以都是候选码。工号、身份证号这两个属性就是主属性。如果主码是一个属性组，那么属性组中的属性都是主属性。</p></li><li><p><strong>非主属性：</strong> 不包含在任何一个候选码中的属性称为非主属性。比如在关系——学生（学号，姓名，年龄，性别，班级）中，主码是“学号”，那么其他的“姓名”、“年龄”、“性别”、“班级”就都可以称为非主属性。</p></li></ul><h2 id="什么是-er-图" tabindex="-1"><a class="header-anchor" href="#什么是-er-图"><span>什么是 ER 图？</span></a></h2><p>ER 图 全称是 Entity Relationship Diagram（实体联系图），提供了表示实体类型、属性和联系的方法。</p><p>ER 图由下面 3 个要素组成：</p><ul><li><p><strong>实体</strong>：通常是现实世界的业务对象，当然使用一些逻辑对象也可以。比如对于一个校园管理系统，会涉及学生、教师、课程、班级等等实体。在 ER 图中，实体使用矩形框表示。</p></li><li><p><strong>属性</strong>：即某个实体拥有的属性，属性用来描述组成实体的要素，对于产品设计来说可以理解为字段。在 ER 图中，属性使用椭圆形表示。</p></li><li><p><strong>联系</strong>：即实体与实体之间的关系，在 ER 图中用菱形表示，这个关系不仅有业务关联关系，还能通过数字表示实体之间的数量对照关系。例如，一个班级会有多个学生就是一种实体间的联系。</p></li></ul><h2 id="数据库范式了解吗" tabindex="-1"><a class="header-anchor" href="#数据库范式了解吗"><span>数据库范式了解吗?</span></a></h2><p>数据库范式有 3 种：</p><ul><li>1NF(第一范式)：属性不可再分。</li><li>2NF(第二范式)：1NF 的基础之上，消除了非主属性对于码的部分函数依赖。</li><li>3NF(第三范式)：3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。</li></ul><h3 id="_1nf-第一范式" tabindex="-1"><a class="header-anchor" href="#_1nf-第一范式"><span>1NF(第一范式)</span></a></h3><p>属性（对应于表中的字段）不能再被分割，也就是这个字段只能是一个值，不能再分为多个其他的字段了。<strong>1NF 是所有关系型数据库的最基本要求</strong> ，也就是说关系型数据库中创建的表一定满足第一范式。</p><h3 id="_2nf-第二范式" tabindex="-1"><a class="header-anchor" href="#_2nf-第二范式"><span>2NF(第二范式)</span></a></h3><p>2NF 在 1NF 的基础之上，消除了非主属性对于码的部分函数依赖。如下图所示，展示了第一范式到第二范式的过渡。第二范式在第一范式的基础上增加了一个列，这个列称为主键，非主属性都依赖于主键。</p><p>一些重要的概念：</p><ul><li><strong>函数依赖（functional dependency）</strong>：若在一张表中，在属性（或属性组）X 的值确定的情况下，必定能确定属性 Y 的值，那么就可以说 Y 函数依赖于 X，写作 X → Y。</li><li><strong>部分函数依赖（partial functional dependency）</strong>：如果 X→Y，并且存在 X 的一个真子集 X0，使得 X0→Y，则称 Y 对 X 部分函数依赖。比如学生基本信息表 R 中（学号，身份证号，姓名）当然学号属性取值是唯一的，在 R 关系中，（学号，身份证号）-&gt;（姓名），（学号）-&gt;（姓名），（身份证号）-&gt;（姓名）；所以姓名部分函数依赖于（学号，身份证号）；</li><li><strong>完全函数依赖(Full functional dependency)</strong>：在一个关系中，若某个非主属性数据项依赖于全部关键字称之为完全函数依赖。比如学生基本信息表 R（学号，班级，姓名）假设不同的班级学号有相同的，班级内学号不能相同，在 R 关系中，（学号，班级）-&gt;（姓名），但是（学号）-&gt;(姓名)不成立，（班级）-&gt;(姓名)不成立，所以姓名完全函数依赖与（学号，班级）；</li><li><strong>传递函数依赖</strong>：在关系模式 R(U)中，设 X，Y，Z 是 U 的不同的属性子集，如果 X 确定 Y、Y 确定 Z，且有 X 不包含 Y，Y 不确定 X，（X∪Y）∩Z=空集合，则称 Z 传递函数依赖(transitive functional dependency) 于 X。传递函数依赖会导致数据冗余和异常。传递函数依赖的 Y 和 Z 子集往往同属于某一个事物，因此可将其合并放到一个表中。比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖。。</li></ul><h3 id="_3nf-第三范式" tabindex="-1"><a class="header-anchor" href="#_3nf-第三范式"><span>3NF(第三范式)</span></a></h3><p>3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。符合 3NF 要求的数据库设计，<strong>基本</strong>上解决了数据冗余过大，插入异常，修改异常，删除异常的问题。比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖，所以该表的设计，不符合 3NF 的要求。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',21),d={href:"https://javaguide.cn/database/basis.html",target:"_blank",rel:"noopener noreferrer"};function h(g,m){const t=n("ExternalLinkIcon");return i(),r("div",null,[c,e("p",null,[e("a",d,[l("https://javaguide.cn/database/basis.html"),s(t)])])])}const _=a(p,[["render",h],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/Database/Basic/Principle/","title":"数据库基础知识","lang":"zh-CN","frontmatter":{"collapsible":true,"index":true,"order":"number","description":"数据库基础知识 什么是数据库, 数据库管理系统, 数据库系统? 数据库 : DataBase 简称 DB 就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合 数据库管理系统 : Database Management System 简称 DBMS 是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库 数据库系统 : Data Ba...","head":[["meta",{"property":"og:url","content":"https://tech.dongcp.top/Database/Basic/Principle/"}],["meta",{"property":"og:site_name","content":"Simeis 147"}],["meta",{"property":"og:title","content":"数据库基础知识"}],["meta",{"property":"og:description","content":"数据库基础知识 什么是数据库, 数据库管理系统, 数据库系统? 数据库 : DataBase 简称 DB 就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合 数据库管理系统 : Database Management System 简称 DBMS 是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库 数据库系统 : Data Ba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-26T06:52:39.000Z"}],["meta",{"property":"article:author","content":"Dongcp"}],["meta",{"property":"article:modified_time","content":"2024-02-26T06:52:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库基础知识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-26T06:52:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dongcp\\",\\"url\\":\\"https://github.com/simeis147\\"}]}"]]},"headers":[{"level":2,"title":"什么是数据库, 数据库管理系统, 数据库系统?","slug":"什么是数据库-数据库管理系统-数据库系统","link":"#什么是数据库-数据库管理系统-数据库系统","children":[]},{"level":2,"title":"什么是元组, 码, 候选码, 主码, 外码, 主属性, 非主属性？","slug":"什么是元组-码-候选码-主码-外码-主属性-非主属性","link":"#什么是元组-码-候选码-主码-外码-主属性-非主属性","children":[]},{"level":2,"title":"什么是 ER 图？","slug":"什么是-er-图","link":"#什么是-er-图","children":[]},{"level":2,"title":"数据库范式了解吗?","slug":"数据库范式了解吗","link":"#数据库范式了解吗","children":[{"level":3,"title":"1NF(第一范式)","slug":"_1nf-第一范式","link":"#_1nf-第一范式","children":[]},{"level":3,"title":"2NF(第二范式)","slug":"_2nf-第二范式","link":"#_2nf-第二范式","children":[]},{"level":3,"title":"3NF(第三范式)","slug":"_3nf-第三范式","link":"#_3nf-第三范式","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1681268086000,"updatedTime":1708930359000,"contributors":[{"name":"simeis147","email":"cpdong7@gmail.com","commits":3}]},"readingTime":{"minutes":5.67,"words":1702},"filePathRelative":"Database/Basic/Principle/README.md","localizedDate":"2023年4月12日","excerpt":"\\n","autoDesc":true}');export{_ as comp,b as data};
