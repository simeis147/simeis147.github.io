import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as h,o,c as l,d as i,e as t,f as a,b as n}from"./app-850d8081.js";const s={},g=n('<h1 id="git-day01" tabindex="-1"><a class="header-anchor" href="#git-day01" aria-hidden="true">#</a> Git-Day01</h1><blockquote><p>掌握 Git 本地仓库操作命令<br> 掌握 Git 远程仓库操作命令<br> 掌握 Git 分支操作命令<br> 了解 Git 标签操作命令<br> 掌握 IDEA 中使用 Git 的方法</p></blockquote><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><h3 id="_1-1-什么是git" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是git" aria-hidden="true">#</a> 1.1 什么是Git</h3><p>Git是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java类、xml文件、html页面等），在软件开发过程中被广泛使用。</p><div class="hint-container tip"><p class="hint-container-title">其他的版本控制工具</p><ul><li>SVN</li><li>CVS</li><li>VSS</li></ul></div><h3 id="_1-2-使用git能做什么" tabindex="-1"><a class="header-anchor" href="#_1-2-使用git能做什么" aria-hidden="true">#</a> 1.2 使用Git能做什么</h3><ul><li>代码回溯：Git在管理文件过程中会记录日志，方便回退到历史版本</li><li>版本切换：Git存在分支的概念，一个项目可以有多个分支（版本），可以任意切换</li><li>多人协作：Git支持多人协作，即一个团队共同开发一个项目，每个团队成员负责一部分代码，通过Git就可以管理和协调</li><li>远程备份：Git通过仓库管理文件，在Git中存在远程仓库，如果本地文件丢失还可以从远程仓库获取</li></ul><h2 id="_2-git概述" tabindex="-1"><a class="header-anchor" href="#_2-git概述" aria-hidden="true">#</a> 2. Git概述</h2><p>Git 是一个分布式版本控制工具，通常用来对软件开发过程中的源代码文件进行管理。通过Git 仓库来存储和管理这些文件，Git 仓库分为两种：</p><ul><li>本地仓库：开发人员自己电脑上的 Git 仓库</li><li>远程仓库：远程服务器上的 Git 仓库</li></ul><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605110616.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解释说明：</p><blockquote><p>commit：提交,将本地文件和版本信息保存到本地仓库</p><p>push：推送,将本地仓库文件和版本信息上传到远程仓库</p><p>pull：拉取,将远程仓库文件和版本信息下载到本地仓库</p></blockquote><h2 id="_3-git代码托管服务" tabindex="-1"><a class="header-anchor" href="#_3-git代码托管服务" aria-hidden="true">#</a> 3. Git代码托管服务</h2><h3 id="_3-1-常用的git代码托管服务" tabindex="-1"><a class="header-anchor" href="#_3-1-常用的git代码托管服务" aria-hidden="true">#</a> 3.1 常用的Git代码托管服务</h3><p>Git中存在两种类型的仓库，即<strong>本地仓库</strong>和<strong>远程仓库</strong>。那么我们如何搭建Git<strong>远程仓库</strong>呢？</p><p>我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</p>',18),c=i("thead",null,[i("tr",null,[i("th",null,"名称"),i("th",null,"网址"),i("th",null,"说明")])],-1),d=i("td",null,"gitHub",-1),p={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},u=i("td",null,"一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub",-1),_=i("td",null,"码云",-1),b={href:"https://gitee.com/",target:"_blank",rel:"noopener noreferrer"},f=i("td",null,"国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快",-1),m=i("td",null,"GitLab",-1),x={href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"},G=i("td",null,"一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务",-1),k=i("td",null,"BitBucket",-1),y={href:"https://bitbucket.org/",target:"_blank",rel:"noopener noreferrer"},z=i("td",null,"一家源代码托管网站，采用Mercurial和Git作为分布式版本控制系统，同时提供商业计划和免费账户",-1),j=i("h2",{id:"_4-git常用命令",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_4-git常用命令","aria-hidden":"true"},"#"),t(" 4. Git常用命令")],-1),q=i("h3",{id:"_4-1-git全局设置",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_4-1-git全局设置","aria-hidden":"true"},"#"),t(" 4.1 Git全局设置")],-1),v=i("p",null,"当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息。在Git 命令行中执行下面命令：",-1),N=i("p",null,[i("strong",null,"设置用户信息"),t(":")],-1),V={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},S=n('<p>git config --global user.email</p><p><strong>查看配置信息</strong>:</p><p>git config --list</p><h3 id="_4-2-获取git仓库" tabindex="-1"><a class="header-anchor" href="#_4-2-获取git仓库" aria-hidden="true">#</a> 4.2 获取Git仓库</h3><p>git clone</p><h3 id="_4-3-工作区、暂存区、版本库" tabindex="-1"><a class="header-anchor" href="#_4-3-工作区、暂存区、版本库" aria-hidden="true">#</a> 4.3 工作区、暂存区、版本库</h3><p><strong>版本库</strong>：前面看到的.git隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</p><p><strong>工作区</strong>：包含.git文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码</p><p><strong>暂存区</strong>：.git文件夹中有很多文件，其中有一个index文件就是暂存区，也可以叫做stage。暂存区是一个临时保存修改文件的地方</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605122913.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-4-git工作区中文件的状态" tabindex="-1"><a class="header-anchor" href="#_4-4-git工作区中文件的状态" aria-hidden="true">#</a> 4.4 Git工作区中文件的状态</h3><p>Git工作区中的文件存在两种状态：</p><ul><li><p>untracked 未跟踪（未被纳入版本控制）</p></li><li><p>tracked 已跟踪（被纳入版本控制）</p><p>​ 1）Unmodified 未修改状态</p><p>​ 2）Modified 已修改状态</p><p>​ 3）Staged 已暂存状态</p></li></ul><p><strong>注意</strong>：文件的状态会随着我们执行Git的命令发生变化</p><h3 id="_4-5-本地仓库操作" tabindex="-1"><a class="header-anchor" href="#_4-5-本地仓库操作" aria-hidden="true">#</a> 4.5 本地仓库操作</h3><p>本地仓库常用命令如下：</p><ul><li>git status 查看文件状态</li><li>git add 将文件的修改加入暂存区</li><li>git reset 将暂存区的文件取消暂存或者是切换到指定版本</li><li>git commit 将暂存区的文件修改提交到版本库</li><li>git log 查看日志</li></ul><h3 id="_4-6-远程仓库操作" tabindex="-1"><a class="header-anchor" href="#_4-6-远程仓库操作" aria-hidden="true">#</a> 4.6 远程仓库操作</h3><ul><li>git remote 查看远程仓库</li><li>git remote add 添加远程仓库</li><li>git clone 从远程仓库克隆</li><li>git pull 从远程仓库拉取</li><li>git push 推送到远程仓库</li></ul><h4 id="_4-6-1-git-remote" tabindex="-1"><a class="header-anchor" href="#_4-6-1-git-remote" aria-hidden="true">#</a> 4.6.1 git remote</h4><p>如果要查看已经配置的远程仓库服务器，可以执行 git remote 命令，它会列出每一个远程服务器的简称。</p><p>如果已经克隆了远程仓库，那么至少应该能看到 origin ，这是 Git 克隆的仓库服务器的默认名字。</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123343.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-6-2-git-remote-add" tabindex="-1"><a class="header-anchor" href="#_4-6-2-git-remote-add" aria-hidden="true">#</a> 4.6.2 git remote add</h4><p>添加远程仓库命令格式：git remote add 简称 远程仓库地址</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123418.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>注意：一个本地仓库可以关联多个远程仓库</p></blockquote><h4 id="_4-6-3-git-clone" tabindex="-1"><a class="header-anchor" href="#_4-6-3-git-clone" aria-hidden="true">#</a> 4.6.3 git clone</h4><p>如果你想获得一份已经存在了的 Git 远程仓库的拷贝，这时就要用到 git clone 命令。 Git 克隆的是该 Git 仓库服务器上的几乎所有数据（包括日志信息、历史记录等）。</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123545.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-6-4-git-push" tabindex="-1"><a class="header-anchor" href="#_4-6-4-git-push" aria-hidden="true">#</a> 4.6.4 git push</h4><p>将本地仓库内容推送到远程仓库，命令格式：git push 远程仓库简称 分支名称</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123555.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-6-5-git-pull" tabindex="-1"><a class="header-anchor" href="#_4-6-5-git-pull" aria-hidden="true">#</a> 4.6.5 git pull</h4><p><strong>git pull</strong> 命令的作用是从远程仓库获取最新版本并合并到本地仓库</p><p>命令格式：git pull 远程仓库简称 分支名称</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123608.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-7-分支操作" tabindex="-1"><a class="header-anchor" href="#_4-7-分支操作" aria-hidden="true">#</a> 4.7 分支操作</h3><p>分支是Git 使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</p><p>本地仓库和远程仓库中都有分支，同一个仓库可以有多个分支，各个分支相互独立，互不干扰。</p><p>通过git init 命令创建本地仓库时默认会创建一个master分支。</p><p>具体命令如下：</p><ul><li>git branch 查看分支</li><li>git branch [name] 创建分支</li><li>git checkout [name] 切换分支</li><li>git push [shortName] [name] 推送至远程仓库分支</li><li>git merge [name] 合并分支</li></ul><h4 id="_4-7-1-查看分支" tabindex="-1"><a class="header-anchor" href="#_4-7-1-查看分支" aria-hidden="true">#</a> 4.7.1 查看分支</h4><p>查看分支命令：git branch</p><p>git branch 列出所有本地分支</p><p>git branch -r 列出所有远程分支</p><p>git branch -a 列出所有本地分支和远程分支</p><h4 id="_4-7-2-创建分支" tabindex="-1"><a class="header-anchor" href="#_4-7-2-创建分支" aria-hidden="true">#</a> 4.7.2 创建分支</h4><p>创建分支命令格式：git branch 分支名称</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123758.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-7-3-切换分支" tabindex="-1"><a class="header-anchor" href="#_4-7-3-切换分支" aria-hidden="true">#</a> 4.7.3 切换分支</h4><p>一个仓库中可以有多个分支，切换分支命令格式：git checkout 分支名称</p><p><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123806.png" alt=" " loading="lazy"><br> 注意：在命令行中会显示出当前所在分支，如上图所示。</p><h4 id="_4-7-4-推送至远程仓库分支" tabindex="-1"><a class="header-anchor" href="#_4-7-4-推送至远程仓库分支" aria-hidden="true">#</a> 4.7.4 推送至远程仓库分支</h4><p>推送至远程仓库分支命令格式：git push 远程仓库简称 分支命令</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123813.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-7-5-合并分支" tabindex="-1"><a class="header-anchor" href="#_4-7-5-合并分支" aria-hidden="true">#</a> 4.7.5 合并分支</h4><p>合并分支就是将两个分支的文件进行合并处理，命令格式：git merge 分支命令</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605123846.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>注意：分支合并时需注意合并的方向，如上图所示，在Master分支执行操作，结果就是将b3分支合并到Master分支。</p></blockquote><h3 id="_4-8-标签操作" tabindex="-1"><a class="header-anchor" href="#_4-8-标签操作" aria-hidden="true">#</a> 4.8 标签操作</h3><p>Git 中的标签，指的是某个分支某个特定时间点的状态。通过标签，可以很方便的切换到标记时的状态。</p><p>比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 、v1.2等）。</p><p>相关的命令：</p><ul><li>git tag 查看标签</li><li>git tag [name] 创建标签</li><li>git push [shortName] [name] 将标签推送至远程仓库</li><li>git checkout -b [branch] [name] 检出标签</li></ul><h4 id="_4-8-1-查看标签" tabindex="-1"><a class="header-anchor" href="#_4-8-1-查看标签" aria-hidden="true">#</a> 4.8.1 查看标签</h4><p>查看标签命令：git tag</p><h4 id="_4-8-2-创建标签" tabindex="-1"><a class="header-anchor" href="#_4-8-2-创建标签" aria-hidden="true">#</a> 4.8.2 创建标签</h4><p>创建标签命令：git tag 标签名</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605124047.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-8-3-将标签推送至远程仓库" tabindex="-1"><a class="header-anchor" href="#_4-8-3-将标签推送至远程仓库" aria-hidden="true">#</a> 4.8.3 将标签推送至远程仓库</h4><p>将标签推送至远程仓库命令：git push 远程仓库简称 标签名</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605124126.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>推送完成后可以在远程仓库中查看标签。</p><h4 id="_4-8-4-检出标签" tabindex="-1"><a class="header-anchor" href="#_4-8-4-检出标签" aria-hidden="true">#</a> 4.8.4 检出标签</h4><p>检出标签时需要新建一个分支来指向某个标签，检出标签的命令格式：git checkout -b 分支名 标签名</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/project/reggietakeout/02git/20230605124220.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure>',78);function B(E,H){const e=h("ExternalLinkIcon");return o(),l("div",null,[g,i("table",null,[c,i("tbody",null,[i("tr",null,[d,i("td",null,[i("a",p,[t("https://github.com/"),a(e)])]),u]),i("tr",null,[_,i("td",null,[i("a",b,[t("https://gitee.com/"),a(e)])]),f]),i("tr",null,[m,i("td",null,[i("a",x,[t("https://about.gitlab.com/"),a(e)])]),G]),i("tr",null,[k,i("td",null,[i("a",y,[t("https://bitbucket.org/"),a(e)])]),z])])]),j,q,v,N,i("p",null,[t("git config --global "),i("a",V,[t("user.name"),a(e)])]),S])}const I=r(s,[["render",B],["__file","git01.html.vue"]]);export{I as default};
