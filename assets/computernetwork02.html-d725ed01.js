import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as p}from"./app-cb364d28.js";const t={},e=p(`<h1 id="计算机网络02" tabindex="-1"><a class="header-anchor" href="#计算机网络02" aria-hidden="true">#</a> 计算机网络02</h1><h2 id="_1-snmp协议的概念" tabindex="-1"><a class="header-anchor" href="#_1-snmp协议的概念" aria-hidden="true">#</a> 1 snmp协议的概念</h2><p>SNMP（Simple Network Management Protocol）是一种用于网络管理的应用层协议，它可以在网络中的设备之间进行通信和信息交换，从而实现对网络设备的监控、配置和管理。SNMP协议定义了一组标准的消息格式和协议操作，可以实现对网络设备的远程管理和监控。</p><p><strong>SNMP协议主要包括以下几个部分</strong>：</p><ol><li><p>管理站：指执行网络管理任务的计算机或者设备，使用SNMP协议向网络设备发送请求，获取设备的状态信息。</p></li><li><p>管理代理：指网络设备上的软件模块，用于响应管理站的请求，提供设备的状态信息和配置数据。</p></li><li><p>管理信息库：指保存在管理代理中的设备状态信息和配置数据，可以由管理站查询和修改。</p></li><li><p>管理对象：指网络设备中的各种资源，例如接口、路由表、系统信息等，可以由管理站查询和配置。</p></li></ol><p><strong>SNMP协议通常使用UDP协议进行通信，它支持三种主要的操作</strong>：</p><ol><li><p>Get：指获取一个或多个管理对象的值，管理站向管理代理发送Get请求，管理代理返回管理对象的值。</p></li><li><p>Set：指设置一个或多个管理对象的值，管理站向管理代理发送Set请求，管理代理设置管理对象的值。</p></li><li><p>Trap：指在管理代理发生重要事件时主动向管理站发送通知，例如设备出现故障或者网络流量超过阈值等。</p></li></ol><p>SNMP协议是一个重要的网络管理协议，它可以帮助网络管理员实现对网络设备的远程监控和管理，提高网络的可靠性和性能。同时，SNMP协议也具有一定的安全风险，因此在使用SNMP协议时需要采取适当的安全措施，例如使用安全版本的SNMP协议和加密传输等。</p><h2 id="_2-交换机阻断和iptables防火墙阻断的原理和实现" tabindex="-1"><a class="header-anchor" href="#_2-交换机阻断和iptables防火墙阻断的原理和实现" aria-hidden="true">#</a> 2 交换机阻断和iptables防火墙阻断的原理和实现</h2><h3 id="_2-1-交换机阻断原理" tabindex="-1"><a class="header-anchor" href="#_2-1-交换机阻断原理" aria-hidden="true">#</a> 2.1 交换机阻断原理</h3><p>交换机阻断（Port Security）是一种网络安全措施，可以限制接入网络的设备数量，并防止未经授权的设备接入网络。</p><p>交换机阻断通常可以通过以下两种方式来实现：</p><ol><li><p>静态MAC地址绑定：在交换机上配置一个静态MAC地址表，将每个接口绑定到特定的MAC地址上。当网络设备连接到交换机的接口上时，交换机会检查设备的MAC地址是否在该接口的绑定列表中，如果不在，则该接口被阻断，设备无法连接到网络。</p></li><li><p>动态MAC地址学习：交换机可以动态学习每个接口连接的设备的MAC地址，并将其记录在MAC地址表中。当新设备连接到交换机的接口上时，交换机会将其MAC地址添加到MAC地址表中，并检查该MAC地址是否超过了预定义的阈值（通常是1或2个设备），如果超过了阈值，则该接口被阻断，设备无法连接到网络。</p></li></ol><h3 id="_2-2-交换机阻断的实现" tabindex="-1"><a class="header-anchor" href="#_2-2-交换机阻断的实现" aria-hidden="true">#</a> 2.2 交换机阻断的实现</h3><h3 id="_2-3-iptables防火墙阻断的原理" tabindex="-1"><a class="header-anchor" href="#_2-3-iptables防火墙阻断的原理" aria-hidden="true">#</a> 2.3 iptables防火墙阻断的原理</h3><p>iptables是Linux系统中的一个防火墙软件，用于过滤和管理网络数据包。它的阻断原理可以简单概括为以下三个步骤：</p><ol><li><p>匹配规则：iptables会按照事先定义好的规则对接收到的每个网络数据包进行匹配。规则可以根据IP地址、端口号、协议类型等多个条件来匹配。</p></li><li><p>判断动作：如果匹配成功，iptables会根据规则中定义的动作来判断是否阻断该数据包。常见的动作包括DROP（丢弃该数据包）、REJECT（拒绝该数据包并向发送端发送一个错误消息）和ACCEPT（接受该数据包）。</p></li><li><p>执行动作：如果匹配成功且判断动作为DROP或REJECT，则iptables会阻断该数据包；否则，iptables会允许该数据包通过防火墙并传递到下一层网络设备。</p></li></ol><h3 id="_2-4-iptables防火墙阻断的实现" tabindex="-1"><a class="header-anchor" href="#_2-4-iptables防火墙阻断的实现" aria-hidden="true">#</a> 2.4 iptables防火墙阻断的实现</h3><h2 id="_3-主动扫描和被动扫描的区别" tabindex="-1"><a class="header-anchor" href="#_3-主动扫描和被动扫描的区别" aria-hidden="true">#</a> 3 主动扫描和被动扫描的区别</h2><p>主动扫描和被动扫描是网络安全中两种常见的扫描方式，它们的区别如下：</p><ol><li><p>主动扫描：是指通过专门的扫描工具，对网络中的目标进行主动扫描，以便发现目标的漏洞和弱点。主动扫描通常需要事先对目标进行信息收集，例如获取目标的IP地址、端口和服务信息等，然后使用专门的扫描工具对目标进行扫描。主动扫描具有主动性、准确性和高效性等特点，但也容易引起目标系统的警觉和防御。</p></li><li><p>被动扫描：是指通过对网络流量进行监听和分析，发现网络中的目标漏洞和弱点。被动扫描通常不需要对目标进行主动扫描，而是通过对目标系统的网络流量进行分析，发现其中的异常或者恶意行为。被动扫描具有隐蔽性和针对性等特点，但需要对网络流量进行实时监控和分析，并且可能会误报或漏报目标的漏洞和弱点。</p></li></ol><h2 id="_4-写一个多线程的java实例" tabindex="-1"><a class="header-anchor" href="#_4-写一个多线程的java实例" aria-hidden="true">#</a> 4 写一个多线程的Java实例</h2><blockquote><p>不要完全照搬网上，结合自己的一些想法，写一个带点业务性质的实例</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankAccount</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span> <span class="token comment">// 银行账户余额</span>

    <span class="token keyword">public</span> <span class="token class-name">BankAccount</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 取款操作</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;正在取款：&quot;</span> <span class="token operator">+</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;取款成功，余额为：&quot;</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;取款失败，余额不足！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BankAccount</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankAccount</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化银行账户余额为1000元</span>

        <span class="token comment">// 创建多个线程模拟多个客户进行取款操作</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;客户A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;客户B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;客户C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动多个线程，进行取款操作</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-建两张表-主、从表-然后关联查询出对应的信息" tabindex="-1"><a class="header-anchor" href="#_5-建两张表-主、从表-然后关联查询出对应的信息" aria-hidden="true">#</a> 5 建两张表，主、从表，然后关联查询出对应的信息</h2><blockquote><p>如：ipv4信息表，ipv4端口表，需要关联两张表查询出对应的IP信息和端口信息</p></blockquote><p>假设有两张表ipv4和ipv4_port，ipv4表中包含ipv4地址的信息，ipv4_port表中包含ipv4地址的端口信息，可以通过以下SQL语句实现关联查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ipv4<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> ipv4_port<span class="token punctuation">.</span>port<span class="token punctuation">,</span> ipv4_port<span class="token punctuation">.</span>service
<span class="token keyword">FROM</span> ipv4
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> ipv4_port <span class="token keyword">ON</span> ipv4<span class="token punctuation">.</span>ip <span class="token operator">=</span> ipv4_port<span class="token punctuation">.</span>ip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述SQL语句中，使用LEFT JOIN关键字将ipv4和ipv4_port表进行关联，关联条件为ipv4表中的ip字段和ipv4_port表中的ip字段相等。SELECT语句中选择ipv4表中的ip字段，ipv4_port表中的port字段和service字段。</p><p>LEFT JOIN关键字表示左连接，即返回左表（ipv4表）中所有记录，以及匹配右表（ipv4_port表）中的记录。如果没有匹配的记录，则返回NULL。如果需要返回右表中所有记录，则可以使用RIGHT JOIN关键字。如果需要返回两个表中都存在的记录，则可以使用INNER JOIN关键字。</p>`,30),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","computernetwork02.html.vue"]]);export{k as default};
