import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as o,d as n,e as a,f as e,a as i}from"./app-uPU5TKFs.js";const l={},r=i('<h1 id="enreka" tabindex="-1"><a class="header-anchor" href="#enreka" aria-hidden="true">#</a> Enreka</h1><h2 id="_1-服务拆分和远程调用" tabindex="-1"><a class="header-anchor" href="#_1-服务拆分和远程调用" aria-hidden="true">#</a> 1 服务拆分和远程调用</h2><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p><h3 id="_1-1-服务拆分原则" tabindex="-1"><a class="header-anchor" href="#_1-1-服务拆分原则" aria-hidden="true">#</a> 1.1 服务拆分原则</h3><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185721.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-服务拆分示例" tabindex="-1"><a class="header-anchor" href="#_1-2-服务拆分示例" aria-hidden="true">#</a> 1.2 服务拆分示例</h3><p>以微服务cloud-demo为例，其结构如下：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185740.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>cloud-demo：父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul><p>要求：</p><ul><li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul><h4 id="_1-2-1-导入sql语句" tabindex="-1"><a class="header-anchor" href="#_1-2-1-导入sql语句" aria-hidden="true">#</a> 1.2.1 导入Sql语句</h4><p>首先，将课前资料提供的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>导入到mysql中：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185815.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>cloud-user表中初始数据如下：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185826.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>cloud-order表中初始数据如下：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185838.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>cloud-order表中持有cloud-user表中的id字段</p></blockquote><h4 id="_1-2-2-导入demo工程" tabindex="-1"><a class="header-anchor" href="#_1-2-2-导入demo工程" aria-hidden="true">#</a> 1.2.2 导入demo工程</h4><p>用IDEA导入课前资料提供的Demo：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185848.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>项目结构如下：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185856.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>导入后，会在IDEA右下角出现弹窗：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185905.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击弹窗，然后按下图选择：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185909.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>会出现这样的菜单：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185925.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置下项目使用的JDK：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185931.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-3-实现远程调用案例" tabindex="-1"><a class="header-anchor" href="#_1-3-实现远程调用案例" aria-hidden="true">#</a> 1.3 实现远程调用案例</h3><p>在order-service服务中，有一个根据id查询订单的接口：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185946.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据id查询订单，返回值是Order对象，如图：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620185955.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中的user为null</p><p>在user-service中有一个根据id查询用户的接口：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190003.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查询的结果如图：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190017.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-3-1-案例需求" tabindex="-1"><a class="header-anchor" href="#_1-3-1-案例需求" aria-hidden="true">#</a> 1.3.1 案例需求</h4><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190052.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure>',47),u={href:"http://localhost:8081/user/%7BuserId%7D",target:"_blank",rel:"noopener noreferrer"},d=i(`<div class="hint-container tip"><p class="hint-container-title">大概的步骤：</p><ul><li>注册一个RestTemplate的实例到Spring容器</li><li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li><li>将查询的User填充到Order对象，一起返回</li></ul></div><h4 id="_1-3-2-注册resttemplate" tabindex="-1"><a class="header-anchor" href="#_1-3-2-注册resttemplate" aria-hidden="true">#</a> 1.3.2 注册RestTemplate</h4><p>首先，在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;cn.itcast.order.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-3-实现远程调用" tabindex="-1"><a class="header-anchor" href="#_1-3-3-实现远程调用" aria-hidden="true">#</a> 1.3.3 实现远程调用</h4><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190102.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-4-提供者与消费者" tabindex="-1"><a class="header-anchor" href="#_1-4-提供者与消费者" aria-hidden="true">#</a> 1.4 提供者与消费者</h3><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190110.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p><p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul><p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p><h2 id="_2-eureka注册中心" tabindex="-1"><a class="header-anchor" href="#_2-eureka注册中心" aria-hidden="true">#</a> 2 Eureka注册中心</h2><p>假如服务提供者user-service部署了多个实例，如图：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190117.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>几个问题：</p><ol><li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li>有多个user-service实例地址，order-service调用时该如何选择？</li><li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li></ol><h3 id="_2-1-eureka的结构和作用" tabindex="-1"><a class="header-anchor" href="#_2-1-eureka的结构和作用" aria-hidden="true">#</a> 2.1 Eureka的结构和作用</h3><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190125.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>问题1：order-service如何得知user-service实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册</li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取</li></ul><hr><p>问题2：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li><li>向该实例地址发起远程调用</li></ul><hr><p>问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service拉取服务时，就能将故障实例排除了</li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><p>因此，接下来我们动手实践的步骤包括：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190135.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-搭建eureka-server" tabindex="-1"><a class="header-anchor" href="#_2-2-搭建eureka-server" aria-hidden="true">#</a> 2.2 搭建eureka-server</h3><p>首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务</p><h4 id="_2-2-1-创建eureka-server服务" tabindex="-1"><a class="header-anchor" href="#_2-2-1-创建eureka-server服务" aria-hidden="true">#</a> 2.2.1 创建eureka-server服务</h4><p>在cloud-demo父工程下，创建一个子模块：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190143.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>填写模块信息：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190153.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后填写服务信息：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190219.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-2-2-引入eureka依赖" tabindex="-1"><a class="header-anchor" href="#_2-2-2-引入eureka依赖" aria-hidden="true">#</a> 2.2.2 引入eureka依赖</h4><p>引入SpringCloud为eureka提供的starter依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-编写启动类" tabindex="-1"><a class="header-anchor" href="#_2-2-3-编写启动类" aria-hidden="true">#</a> 2.2.3 编写启动类</h4><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>eureka</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaServer</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-4-编写配置文件" tabindex="-1"><a class="header-anchor" href="#_2-2-4-编写配置文件" aria-hidden="true">#</a> 2.2.4 编写配置文件</h4><p>编写一个application.yml文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10086</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> 
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-5-启动服务" tabindex="-1"><a class="header-anchor" href="#_2-2-5-启动服务" aria-hidden="true">#</a> 2.2.5 启动服务</h4>`,55),g={href:"http://127.0.0.1:10086",target:"_blank",rel:"noopener noreferrer"},k=i(`<figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190234.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-3-服务注册" tabindex="-1"><a class="header-anchor" href="#_2-3-服务注册" aria-hidden="true">#</a> 2.3 服务注册</h3><p>下面，我们将user-service注册到eureka-server中去。</p><h4 id="_2-3-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-3-1-引入依赖" aria-hidden="true">#</a> 2.3.1 引入依赖</h4><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-3-2-配置文件" aria-hidden="true">#</a> 2.3.2 配置文件</h4><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> userservice
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3-启动多个user-service实例" tabindex="-1"><a class="header-anchor" href="#_2-3-3-启动多个user-service实例" aria-hidden="true">#</a> 2.3.3 启动多个user-service实例</h4><p>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。</p><p>首先，复制原来的user-service启动配置：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190244.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后，在弹出的窗口中，填写信息：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190250.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在，SpringBoot窗口会出现两个user-service启动配置：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190255.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不过，第一个是8081端口，第二个是8082端口。</p><p>启动两个user-service实例：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190303.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看eureka-server管理页面：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190308.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-4-服务发现" tabindex="-1"><a class="header-anchor" href="#_2-4-服务发现" aria-hidden="true">#</a> 2.4 服务发现</h3><p>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p><h4 id="_2-4-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-4-1-引入依赖" aria-hidden="true">#</a> 2.4.1 引入依赖</h4><p>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。</p><p>在order-service的pom文件中，引入下面的eureka-client依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-4-2-配置文件" aria-hidden="true">#</a> 2.4.2 配置文件</h4><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p><p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> orderservice
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-3-服务拉取和负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-4-3-服务拉取和负载均衡" aria-hidden="true">#</a> 2.4.3 服务拉取和负载均衡</h4><p>最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。</p><p>不过这些动作不用我们去做，只需要添加一些注解即可。</p><p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190518.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190526.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p><h2 id="_3-ribbon负载均衡" tabindex="-1"><a class="header-anchor" href="#_3-ribbon负载均衡" aria-hidden="true">#</a> 3 Ribbon负载均衡</h2><p>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p><h3 id="_3-1-负载均衡原理" tabindex="-1"><a class="header-anchor" href="#_3-1-负载均衡原理" aria-hidden="true">#</a> 3.1 负载均衡原理</h3><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190536.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,45),h={href:"http://userservice/user/1",target:"_blank",rel:"noopener noreferrer"},m={href:"http://localhost:8081",target:"_blank",rel:"noopener noreferrer"},v=i('<h3 id="_3-2-源码跟踪" tabindex="-1"><a class="header-anchor" href="#_3-2-源码跟踪" aria-hidden="true">#</a> 3.2 源码跟踪</h3><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然根据service名称，可以获取服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p><strong>进行源码跟踪</strong>：</p><h4 id="_1-loadbalancerintercepor" tabindex="-1"><a class="header-anchor" href="#_1-loadbalancerintercepor" aria-hidden="true">#</a> 1）LoadBalancerIntercepor</h4><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190546.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p>',7),b=n("code",null,"request.getURI()",-1),f={href:"http://user-service/user/8",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,[n("code",null,"originalUri.getHost()"),a("：获取uri路径的主机名，其实就是服务id，"),n("code",null,"user-service")],-1),_=n("li",null,[n("code",null,"this.loadBalancer.execute()"),a("：处理服务id，和用户请求。")],-1),x=i('<p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h4 id="_2-loadbalancerclient" tabindex="-1"><a class="header-anchor" href="#_2-loadbalancerclient" aria-hidden="true">#</a> 2）LoadBalancerClient</h4><p>继续跟入execute方法：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190557.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190602.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>果然实现了负载均衡。</p><h4 id="_3-负载均衡策略irule" tabindex="-1"><a class="header-anchor" href="#_3-负载均衡策略irule" aria-hidden="true">#</a> 3）负载均衡策略IRule</h4><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190613.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们继续跟入：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190616.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190620.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们看看这个rule是谁：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190624.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190631.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h4 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4）总结</h4><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190702.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基本流程如下：</p>',26),z={href:"http://userservice/user/1",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,"RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service",-1),S=n("li",null,"DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表",-1),E=n("li",null,"eureka返回列表，localhost:8081、localhost:8082",-1),C=n("li",null,"IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081",-1),R={href:"http://localhost:8081/user/1",target:"_blank",rel:"noopener noreferrer"},w=i(`<h3 id="_3-3-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_3-3-负载均衡策略" aria-hidden="true">#</a> 3.3 负载均衡策略</h3><h4 id="_3-3-1-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_3-3-1-负载均衡策略" aria-hidden="true">#</a> 3.3.1 负载均衡策略</h4><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><figure><img src="https://simeis147-github-io.oss-cn-shenzhen.aliyuncs.com/BackEnd/SpringCloud/20230620190712.png" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的&lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h4 id="_3-3-2-自定义负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_3-3-2-自定义负载均衡策略" aria-hidden="true">#</a> 3.3.2 自定义负载均衡策略</h4><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li><p>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p><strong>注意</strong>：一般用默认的负载均衡规则，不做修改</p></blockquote><h3 id="_3-4-饥饿加载" tabindex="-1"><a class="header-anchor" href="#_3-4-饥饿加载" aria-hidden="true">#</a> 3.4 饥饿加载</h3><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">clients</span><span class="token punctuation">:</span> userservice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function I(A,q){const s=p("ExternalLinkIcon");return c(),o("div",null,[r,n("p",null,[a("因此，需要在order-service中向user-service发起http的请求"),n("a",u,[a("http://localhost:8081/user/{userId}"),e(s)])]),d,n("p",null,[a("启动微服务，然后在浏览器访问："),n("a",g,[a("http://127.0.0.1:10086"),e(s)])]),k,n("p",null,[a("那么我们发出的请求明明是"),n("a",h,[a("http://userservice/user/1"),e(s)]),a("，怎么变成了"),n("a",m,[a("http://localhost:8081"),e(s)]),a("的呢？")]),v,n("ul",null,[n("li",null,[b,a("：获取请求uri，本例中就是 "),n("a",f,[a("http://user-service/user/8"),e(s)])]),y,_]),x,n("ul",null,[n("li",null,[a("拦截我们的RestTemplate请求"),n("a",z,[a("http://userservice/user/1"),e(s)])]),B,S,E,C,n("li",null,[a("RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到"),n("a",R,[a("http://localhost:8081/user/1"),e(s)]),a("，发起真实请求")])]),w])}const T=t(l,[["render",I],["__file","springcloud01.html.vue"]]);export{T as default};
