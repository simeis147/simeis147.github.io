const t=JSON.parse('{"key":"v-84f87c74","path":"/Tools/Git/02DocumentNotes/documentnotes02.html","title":"2. Git分支-分支原理","lang":"zh-CN","frontmatter":{"order":2,"date":"2023-05-15T00:00:00.000Z","category":["Git"],"description":"2. Git分支-分支原理 Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。 首次提交 在进行提交操作时，Git 会保存一个提交对象（commit object）。 假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中 （Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交：","head":[["meta",{"property":"og:url","content":"https://github.com/simeis147/Tools/Git/02DocumentNotes/documentnotes02.html"}],["meta",{"property":"og:site_name","content":"Simeis 147"}],["meta",{"property":"og:title","content":"2. Git分支-分支原理"}],["meta",{"property":"og:description","content":"2. Git分支-分支原理 Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。 首次提交 在进行提交操作时，Git 会保存一个提交对象（commit object）。 假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中 （Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T08:53:15.000Z"}],["meta",{"property":"article:author","content":"Dongcp"}],["meta",{"property":"article:published_time","content":"2023-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-15T08:53:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. Git分支-分支原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-15T08:53:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dongcp\\",\\"url\\":\\"https://github.com/simeis147\\"}]}"]]},"headers":[{"level":2,"title":"首次提交","slug":"首次提交","link":"#首次提交","children":[]},{"level":2,"title":"再次提交","slug":"再次提交","link":"#再次提交","children":[]},{"level":2,"title":"Git 的分支","slug":"git-的分支","link":"#git-的分支","children":[]},{"level":2,"title":"创建分支","slug":"创建分支","link":"#创建分支","children":[]},{"level":2,"title":"当前分支的指针","slug":"当前分支的指针","link":"#当前分支的指针","children":[]},{"level":2,"title":"查看当前所在分支","slug":"查看当前所在分支","link":"#查看当前所在分支","children":[]},{"level":2,"title":"分支切换","slug":"分支切换","link":"#分支切换","children":[]},{"level":2,"title":"创建分支同时切换","slug":"创建分支同时切换","link":"#创建分支同时切换","children":[]}],"git":{"createdTime":1684135553000,"updatedTime":1684140795000,"contributors":[{"name":"simeis147","email":"cpdong7@gmail.com","commits":2}]},"readingTime":{"minutes":6.35,"words":1904},"filePathRelative":"Tools/Git/02DocumentNotes/documentnotes02.md","localizedDate":"2023年5月15日","excerpt":"<h1> 2. Git分支-分支原理</h1>\\n<p>Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。</p>\\n<h2> 首次提交</h2>\\n<p>在进行提交操作时，Git 会保存一个提交对象（commit object）。</p>\\n<p>假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中 （Git 使用 <em>blob</em> 对象来保存它们），最终将校验和加入到暂存区域等待提交：</p>","autoDesc":true}');export{t as data};
