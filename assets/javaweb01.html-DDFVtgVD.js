import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,a as e}from"./app-n7-iX-IR.js";const n="/assets/image-20210726153815028-BNLImZoA.png",s="/assets/image-20210726154144488-CbuxoB1U.png",l="/assets/image-20210726154922337-BYUpPI4_.png",r="/assets/image-20210726155759621-9p5bYS3H.png",o="/assets/image-20210726160928515-zyuJvFNf.png",p="/assets/image-20210726161340796-hlcbEU4A.png",d="/assets/image-20210726161616034-CNk50QsB.png",g="/assets/image-20210726163518885-Djj--Gcl.png",c="/assets/image-20210726164348048-DHM6YK59.png",h="/assets/2-D20HydIr.gif",m="/assets/20230403001728-Gf-f0xSV.png",v="/assets/image-20210726172709112-BLPSrWJ0.png",f="/assets/image-20220616124015567-BdGDWuIq.png",k="/assets/image-20210726173153576-CpccR6LH.png",u="/assets/image-20220616124348972-ClnKSdvW.png",_="/assets/image-20210726174718176-pF4TBiDc.png",b="/assets/5-Cqd2KzKb.gif",y="/assets/6-C1f0qMoD.gif",B="/assets/7-qVdm90QR.gif",x="/assets/image-20210726194703845-oGUN355g.png",M="/assets/1537786634456-1582625518984-annNtPR2.png",E={},A=e('<h1 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span>Maven</span></a></h1><p>Maven是专门用于<strong>构建</strong>和<strong>管理</strong>Java项目的工具</p><div class="hint-container note"><p class="hint-container-title">主要功能：</p><p>提供了一套标准化的 <strong>项目结构</strong><br> 提供了一套标准化的 <strong>构建流程</strong> （编译，测试，打包，发布……）<br> 提供了一套 <strong>依赖管理</strong> 机制</p></div><figure><img src="'+n+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+s+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Maven使用标准的 <code>坐标</code> 配置来管理各种依赖</p><figure><img src="'+l+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-maven简介" tabindex="-1"><a class="header-anchor" href="#_1-maven简介"><span>1 Maven简介</span></a></h2><p>Apache Maven 是一个项目管理和构建的工具，它基于项目对象模型 ( POM ) 的概念，通过一小段描述信息来管理项目的构建、报告和文档。</p><h3 id="_1-1-maven模型" tabindex="-1"><a class="header-anchor" href="#_1-1-maven模型"><span>1.1 Maven模型</span></a></h3><ul><li>项目对象模型 (Project Object Model)</li><li>依赖管理模型(Dependency)</li><li>插件(Plugin)</li></ul><figure><img src="'+r+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图就是Maven的模型，紫色部分，是用来完成 <code>标准化构建流程</code> 。如我们需要编译，Maven提供了一个编译插件，我们需要打包，Maven就提供了一个打包插件。</p><figure><img src="'+o+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图紫色部分，<strong>项目对象模型</strong>就是将自己抽象成一个对象模型，有自己专属的坐标，如下图所示</p><figure><img src="'+p+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>依赖管理模型</strong>则是使用坐标来描述当前项目依赖哪些第三方 jar 包</p><figure><img src="'+d+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-仓库分类" tabindex="-1"><a class="header-anchor" href="#_1-2-仓库分类"><span>1.2 仓库分类</span></a></h3><ul><li>本地仓库：自己计算机上的一个目录</li><li><a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener noreferrer">中央仓库</a>：由Maven团队维护的全球唯一的仓库</li><li>远程仓库(私服)：一般由公司团队搭建的私有仓库</li></ul><h2 id="_2-maven安装配置" tabindex="-1"><a class="header-anchor" href="#_2-maven安装配置"><span>2 Maven安装配置</span></a></h2><p><strong>目录结构</strong>：</p><figure><img src="'+g+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>bin目录 ： 可执行命令。mvn 命令（重点关注）。</li><li>conf目录 ： Maven的配置文件。<code>settings.xml</code></li><li>lib目录 ： Maven依赖的jar包。Maven也是使用java开发的，所以它也依赖其他的jar包。</li></ul><p><strong>配置本地仓库</strong>：</p><p>修改 conf/settings.xml 中的 &lt;localRepository&gt; 为一个指定目录作为本地仓库，用来存储jar包。</p><figure><img src="'+c+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+h+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>配置阿里云私服</strong>： 修改 conf/settings.xml 中的 &lt;mirrors&gt; 标签，添加子标签：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">mirror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;alimaven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;aliyun maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">mirrorOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;central&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">mirrorOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;          </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">mirror</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-maven基本使用" tabindex="-1"><a class="header-anchor" href="#_3-maven基本使用"><span>3 Maven基本使用</span></a></h2><h3 id="_3-1-maven-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-1-maven-常用命令"><span>3.1 Maven 常用命令</span></a></h3><div class="hint-container tip"><p class="hint-container-title">5个常用命令</p><p>compile ：编译 （ 编译项目源代码 ）<br> clean：清理（ 移除上一次构建生成的文件 ）<br> test：测试 （ 使用合适的单元测试框架运行测试(junit) ）<br> package：打包 （ 将编译后的文件打包，如：jar、war等 ）<br> install：安装 （ 安装项目到本地仓库 ）</p></div><figure><img src="`+m+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>安装命令演示：</strong></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mvn install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令会将当前项目打成jar包，并安装到本地仓库。</p><figure><img src="'+v+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-maven-生命周期" tabindex="-1"><a class="header-anchor" href="#_3-2-maven-生命周期"><span>3.2 Maven 生命周期</span></a></h3><p>Maven对项目构建的生命周期划分为3套（相互独立）：</p><figure><img src="'+f+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>clean ：清理工作。</li><li>default ：核心工作，例如编译、测试、打包、安装、部署等。</li><li>site ： 产生报告，发布站点等。这套声明周期一般不会使用。</li></ul><p><strong>同一套生命周期内，执行后边的命令，前面的所有命令会自动执行</strong>。例如默认（default）生命周期如下：</p><figure><img src="'+k+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当我们执行 <code>install</code>（安装）命令时，它会先执行 <code>compile</code>命令，再执行 <code>test</code> 命令，再执行 <code>package</code> 命令，最后执行 <code>install</code> 命令。</p><p><strong>三套生命周期又包含哪些具体的阶段呢</strong>？</p><figure><img src="'+u+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-idea使用maven" tabindex="-1"><a class="header-anchor" href="#_4-idea使用maven"><span>4 IDEA使用Maven</span></a></h2><p><strong>什么是坐标？</strong></p><ul><li>Maven 中的坐标是<strong>资源的唯一标识</strong></li><li>使用坐标来<strong>定义项目</strong>或<strong>引入项目</strong>中需要的依赖</li></ul><p><strong>Maven 坐标主要组成</strong>:</p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.baidu）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul><figure><img src="'+_+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container note"><p class="hint-container-title">注意</p><p>上面所说的资源可以是插件、依赖、当前项目。<br> 项目如果被其他的项目依赖时，也是需要坐标来引入的。</p></div><h2 id="_5-依赖管理" tabindex="-1"><a class="header-anchor" href="#_5-依赖管理"><span>5 依赖管理</span></a></h2><p><a href="https://mvnrepository.com/" target="_blank" rel="noopener noreferrer">Maven坐标网站</a></p><h3 id="_5-1-添加依赖的几种方式" tabindex="-1"><a class="header-anchor" href="#_5-1-添加依赖的几种方式"><span>5.1 添加依赖的几种方式</span></a></h3><ol><li><p>利用中央仓库搜索的依赖坐标</p><figure><img src="'+b+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>利用IDEA工具搜索依赖坐标</p><figure><img src="'+y+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>快速导入依赖坐标</p><figure><img src="'+B+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><h3 id="_5-2-依赖范围" tabindex="-1"><a class="header-anchor" href="#_5-2-依赖范围"><span>5.2 依赖范围</span></a></h3><p>设置坐标的依赖范围(scope)，可以设置对应jar包的作用范围：编译环境、测试环境、运行环境。</p><p>下图给 <code>junit</code> 依赖通过 <code>scope</code> 标签指定依赖的作用范围。 那么这个依赖就只能作用在测试环境，其他环境下不能使用。</p><figure><img src="'+x+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么 <code>scope</code> 都可以有哪些取值呢？</p><table><thead><tr><th><strong>依赖范围</strong></th><th>编译classpath</th><th>测试classpath</th><th>运行classpath</th><th>例子</th></tr></thead><tbody><tr><td><strong>compile</strong></td><td>Y</td><td>Y</td><td>Y</td><td>logback</td></tr><tr><td><strong>test</strong></td><td>-</td><td>Y</td><td>-</td><td>Junit</td></tr><tr><td><strong>provided</strong></td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td><strong>runtime</strong></td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr><tr><td><strong>system</strong></td><td>Y</td><td>Y</td><td>-</td><td>存储在本地的jar包</td></tr></tbody></table><ul><li>compile ：作用于编译环境、测试环境、运行环境。</li><li>test ： 作用于测试环境。典型的就是Junit坐标，以后使用Junit时，都会将scope指定为该值</li><li>provided ：作用于编译环境、测试环境。<code>servlet-api</code> ，在使用它时，必须将 <code>scope</code> 设置为该值，不然运行时就会报错</li><li>runtime ： 作用于测试环境、运行环境。jdbc驱动一般将 <code>scope</code> 设置为该值，当然不设置也没有任何问题</li></ul><h3 id="_5-3-更新依赖索引" tabindex="-1"><a class="header-anchor" href="#_5-3-更新依赖索引"><span>5.3 更新依赖索引</span></a></h3><p>有时候idea配置完maven仓库信息后，在idea中依然搜索不到仓库中的jar包。这是因为仓库中的jar包索引尚未更新到idea中，这个时候要更新idea中maven的索引。</p><p>具体做法：打开设置----&gt; 搜索maven----&gt; Repositories----&gt; 选中本地仓库-----&gt; 点击Update</p><figure><img src="'+M+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure>',69),z=[A];function j(F,C){return t(),a("div",null,z)}const J=i(E,[["render",j],["__file","javaweb01.html.vue"]]),T=JSON.parse('{"path":"/BackEnd/JavaWeb/javaweb01.html","title":"Maven","lang":"zh-CN","frontmatter":{"order":1,"date":"2023-03-15T00:00:00.000Z","category":["JavaWeb","Maven"],"head":[["meta",{"property":"og:url","content":"https://tech.dongcp.top/BackEnd/JavaWeb/javaweb01.html"}],["meta",{"property":"og:site_name","content":"Simeis 147"}],["meta",{"property":"og:title","content":"Maven"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-17T12:41:43.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-17T12:41:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Maven\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-17T12:41:43.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1 Maven简介","slug":"_1-maven简介","link":"#_1-maven简介","children":[{"level":3,"title":"1.1 Maven模型","slug":"_1-1-maven模型","link":"#_1-1-maven模型","children":[]},{"level":3,"title":"1.2 仓库分类","slug":"_1-2-仓库分类","link":"#_1-2-仓库分类","children":[]}]},{"level":2,"title":"2 Maven安装配置","slug":"_2-maven安装配置","link":"#_2-maven安装配置","children":[]},{"level":2,"title":"3 Maven基本使用","slug":"_3-maven基本使用","link":"#_3-maven基本使用","children":[{"level":3,"title":"3.1 Maven 常用命令","slug":"_3-1-maven-常用命令","link":"#_3-1-maven-常用命令","children":[]},{"level":3,"title":"3.2 Maven 生命周期","slug":"_3-2-maven-生命周期","link":"#_3-2-maven-生命周期","children":[]}]},{"level":2,"title":"4 IDEA使用Maven","slug":"_4-idea使用maven","link":"#_4-idea使用maven","children":[]},{"level":2,"title":"5  依赖管理","slug":"_5-依赖管理","link":"#_5-依赖管理","children":[{"level":3,"title":"5.1 添加依赖的几种方式","slug":"_5-1-添加依赖的几种方式","link":"#_5-1-添加依赖的几种方式","children":[]},{"level":3,"title":"5.2 依赖范围","slug":"_5-2-依赖范围","link":"#_5-2-依赖范围","children":[]},{"level":3,"title":"5.3 更新依赖索引","slug":"_5-3-更新依赖索引","link":"#_5-3-更新依赖索引","children":[]}]}],"git":{"createdTime":1681268086000,"updatedTime":1718628103000,"contributors":[{"name":"simeis147","email":"cpdong7@gmail.com","commits":2}]},"readingTime":{"minutes":4.56,"words":1369},"filePathRelative":"BackEnd/JavaWeb/javaweb01.md","localizedDate":"2023年3月15日","excerpt":"\\n"}');export{J as comp,T as data};
