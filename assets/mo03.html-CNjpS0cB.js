import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,a as n}from"./app-CtYb1EQf.js";const i={},r=n('<h1 id="挑战级问题" tabindex="-1"><a class="header-anchor" href="#挑战级问题"><span>挑战级问题</span></a></h1><h2 id="aop的实现原理" tabindex="-1"><a class="header-anchor" href="#aop的实现原理"><span>AOP的实现原理</span></a></h2><h2 id="spring-bean的生命周期" tabindex="-1"><a class="header-anchor" href="#spring-bean的生命周期"><span>Spring Bean的生命周期</span></a></h2><h2 id="redis数据结构的实现原理" tabindex="-1"><a class="header-anchor" href="#redis数据结构的实现原理"><span>Redis数据结构的实现原理</span></a></h2><h2 id="redis线程模型" tabindex="-1"><a class="header-anchor" href="#redis线程模型"><span>Redis线程模型</span></a></h2><h2 id="缓存双写一致性问题" tabindex="-1"><a class="header-anchor" href="#缓存双写一致性问题"><span>缓存双写一致性问题</span></a></h2><h2 id="分布式事务cap理论及2pc、3pc协议" tabindex="-1"><a class="header-anchor" href="#分布式事务cap理论及2pc、3pc协议"><span>分布式事务CAP理论及2pc、3pc协议</span></a></h2><h2 id="分布式锁实现机制原理" tabindex="-1"><a class="header-anchor" href="#分布式锁实现机制原理"><span>分布式锁实现机制原理</span></a></h2><h2 id="领域驱动设计" tabindex="-1"><a class="header-anchor" href="#领域驱动设计"><span>领域驱动设计</span></a></h2><h2 id="kafka的设计架构" tabindex="-1"><a class="header-anchor" href="#kafka的设计架构"><span>Kafka的设计架构</span></a></h2><h2 id="kafka的高性能设计" tabindex="-1"><a class="header-anchor" href="#kafka的高性能设计"><span>Kafka的高性能设计</span></a></h2><h2 id="kafka的持久化设计" tabindex="-1"><a class="header-anchor" href="#kafka的持久化设计"><span>Kafka的持久化设计</span></a></h2>',12),s=[r];function c(h,l){return a(),t("div",null,s)}const o=e(i,[["render",c],["__file","mo03.html.vue"]]),m=JSON.parse('{"path":"/ComputerBasics/DataStructure/02MO/mo03.html","title":"挑战级问题","lang":"zh-CN","frontmatter":{"order":3,"date":"2024-03-11T00:00:00.000Z","description":"挑战级问题 AOP的实现原理 Spring Bean的生命周期 Redis数据结构的实现原理 Redis线程模型 缓存双写一致性问题 分布式事务CAP理论及2pc、3pc协议 分布式锁实现机制原理 领域驱动设计 Kafka的设计架构 Kafka的高性能设计 Kafka的持久化设计","head":[["meta",{"property":"og:url","content":"https://tech.dongcp.top/ComputerBasics/DataStructure/02MO/mo03.html"}],["meta",{"property":"og:site_name","content":"Simeis 147"}],["meta",{"property":"og:title","content":"挑战级问题"}],["meta",{"property":"og:description","content":"挑战级问题 AOP的实现原理 Spring Bean的生命周期 Redis数据结构的实现原理 Redis线程模型 缓存双写一致性问题 分布式事务CAP理论及2pc、3pc协议 分布式锁实现机制原理 领域驱动设计 Kafka的设计架构 Kafka的高性能设计 Kafka的持久化设计"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-11T11:58:34.000Z"}],["meta",{"property":"article:author","content":"Dongcp"}],["meta",{"property":"article:published_time","content":"2024-03-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-11T11:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"挑战级问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-11T11:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dongcp\\",\\"url\\":\\"https://github.com/simeis147\\"}]}"]]},"headers":[{"level":2,"title":"AOP的实现原理","slug":"aop的实现原理","link":"#aop的实现原理","children":[]},{"level":2,"title":"Spring Bean的生命周期","slug":"spring-bean的生命周期","link":"#spring-bean的生命周期","children":[]},{"level":2,"title":"Redis数据结构的实现原理","slug":"redis数据结构的实现原理","link":"#redis数据结构的实现原理","children":[]},{"level":2,"title":"Redis线程模型","slug":"redis线程模型","link":"#redis线程模型","children":[]},{"level":2,"title":"缓存双写一致性问题","slug":"缓存双写一致性问题","link":"#缓存双写一致性问题","children":[]},{"level":2,"title":"分布式事务CAP理论及2pc、3pc协议","slug":"分布式事务cap理论及2pc、3pc协议","link":"#分布式事务cap理论及2pc、3pc协议","children":[]},{"level":2,"title":"分布式锁实现机制原理","slug":"分布式锁实现机制原理","link":"#分布式锁实现机制原理","children":[]},{"level":2,"title":"领域驱动设计","slug":"领域驱动设计","link":"#领域驱动设计","children":[]},{"level":2,"title":"Kafka的设计架构","slug":"kafka的设计架构","link":"#kafka的设计架构","children":[]},{"level":2,"title":"Kafka的高性能设计","slug":"kafka的高性能设计","link":"#kafka的高性能设计","children":[]},{"level":2,"title":"Kafka的持久化设计","slug":"kafka的持久化设计","link":"#kafka的持久化设计","children":[]}],"git":{"createdTime":1710058779000,"updatedTime":1710158314000,"contributors":[{"name":"simeis147","email":"cpdong7@gmail.com","commits":2}]},"readingTime":{"minutes":0.32,"words":97},"filePathRelative":"ComputerBasics/DataStructure/02MO/mo03.md","localizedDate":"2024年3月11日","excerpt":"\\n<h2>AOP的实现原理</h2>\\n<h2>Spring Bean的生命周期</h2>\\n<h2>Redis数据结构的实现原理</h2>\\n<h2>Redis线程模型</h2>\\n<h2>缓存双写一致性问题</h2>\\n<h2>分布式事务CAP理论及2pc、3pc协议</h2>\\n<h2>分布式锁实现机制原理</h2>\\n<h2>领域驱动设计</h2>\\n<h2>Kafka的设计架构</h2>\\n<h2>Kafka的高性能设计</h2>\\n<h2>Kafka的持久化设计</h2>\\n","autoDesc":true}');export{o as comp,m as data};
