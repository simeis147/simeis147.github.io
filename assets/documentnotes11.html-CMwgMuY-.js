const e=JSON.parse('{"key":"v-1e95b730","path":"/Tools/Git/02DocumentNotes/documentnotes11.html","title":"11. Git工具-重置揭密","lang":"zh-CN","frontmatter":{"order":11,"date":"2023-05-15T00:00:00.000Z","category":["Git"],"description":"11. Git工具-重置揭密 在继续了解更专业的工具前，我们先探讨一下 Git 的 reset 和 checkout 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。 三棵树 理解 reset 和 checkout 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）","head":[["meta",{"property":"og:url","content":"https://tech.dongcp.top/Tools/Git/02DocumentNotes/documentnotes11.html"}],["meta",{"property":"og:site_name","content":"Simeis 147"}],["meta",{"property":"og:title","content":"11. Git工具-重置揭密"}],["meta",{"property":"og:description","content":"11. Git工具-重置揭密 在继续了解更专业的工具前，我们先探讨一下 Git 的 reset 和 checkout 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。 三棵树 理解 reset 和 checkout 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T08:53:15.000Z"}],["meta",{"property":"article:author","content":"Dongcp"}],["meta",{"property":"article:published_time","content":"2023-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-15T08:53:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11. Git工具-重置揭密\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-15T08:53:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dongcp\\",\\"url\\":\\"https://github.com/simeis147\\"}]}"]]},"headers":[{"level":2,"title":"三棵树","slug":"三棵树","link":"#三棵树","children":[{"level":3,"title":"HEAD","slug":"head","link":"#head","children":[]},{"level":3,"title":"索引","slug":"索引","link":"#索引","children":[]},{"level":3,"title":"工作目录","slug":"工作目录","link":"#工作目录","children":[]}]},{"level":2,"title":"工作流程","slug":"工作流程","link":"#工作流程","children":[]},{"level":2,"title":"重置的作用","slug":"重置的作用","link":"#重置的作用","children":[{"level":3,"title":"第 1 步：移动 HEAD","slug":"第-1-步-移动-head","link":"#第-1-步-移动-head","children":[]},{"level":3,"title":"第 2 步：更新索引（--mixed）","slug":"第-2-步-更新索引-mixed","link":"#第-2-步-更新索引-mixed","children":[]},{"level":3,"title":"第 3 步：更新工作目录（--hard）","slug":"第-3-步-更新工作目录-hard","link":"#第-3-步-更新工作目录-hard","children":[]},{"level":3,"title":"回顾","slug":"回顾","link":"#回顾","children":[]}]},{"level":2,"title":"通过路径来重置","slug":"通过路径来重置","link":"#通过路径来重置","children":[]},{"level":2,"title":"压缩","slug":"压缩","link":"#压缩","children":[]},{"level":2,"title":"检出","slug":"检出","link":"#检出","children":[{"level":3,"title":"不带路径","slug":"不带路径","link":"#不带路径","children":[]},{"level":3,"title":"带路径","slug":"带路径","link":"#带路径","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1684135553000,"updatedTime":1684140795000,"contributors":[{"name":"simeis147","email":"cpdong7@gmail.com","commits":2}]},"readingTime":{"minutes":13.1,"words":3931},"filePathRelative":"Tools/Git/02DocumentNotes/documentnotes11.md","localizedDate":"2023年5月15日","excerpt":"<h1> 11. Git工具-重置揭密</h1>\\n<p>在继续了解更专业的工具前，我们先探讨一下 Git 的 <code>reset</code> 和 <code>checkout</code> 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。</p>\\n<h2> 三棵树</h2>\\n<p>理解 <code>reset</code> 和 <code>checkout</code> 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）</p>","autoDesc":true}');export{e as data};
