import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,e as n,f as s,d as p,b as a}from"./app-259e5017.js";const u="/assets/image-20220826161735076-94c3ff97.png",r="/assets/image-20220826165340157-1372028a.png",k="/assets/image-20220826171407354-31998f04.png",d="/assets/image-20220826171454775-4dcf96ea.png",m="/assets/image-20220826180550583-8d08e0ec.png",v="/assets/image-20221203122405075-d8352b09.png",g="/assets/image-20220826181117898-806a840c.png",b="/assets/image-20221203130726310-d0630c50.png",f="/assets/image-20221203131954932-f03e6b30.png",y="/assets/image-20221203161246168-2b765947.png",h="/assets/image-20221203161004349-0e7c14cb.png",q="/assets/image-20221203160447953-568f6c00.png",w="/assets/image-20221203162706175-89f92077.png",_="/assets/image-20221203164114083-1a6ca00e.png",x="/assets/image-20221203164944144-bcff2df3.png",S="/assets/image-20221203190218468-f3b40c14.png",j="/assets/image-20221203191732601-a22772d2.png",C="/assets/image-20221203191822996-fd9f466d.png",R="/assets/image-20221203211640646-29d9543e.png",E="/assets/image-20221203212221939-4ff6a924.png",P="/assets/image-20221203212024679-8cdae50a.png",O="/assets/image-20220826194159343-1d5291b4.png",z="/assets/image-20221203213120692-14709e75.png",A="/assets/image-20221203214600716-77322dd0.png",I="/assets/image-20221203225623337-f6f47052.png",L="/assets/image-20221203230457901-fd40d47f.png",D="/assets/image-20221203231803000-3eb9664e.png",T="/assets/image-20221203235715804-f13d4b88.png",M="/assets/image-20221204001520756-a786638e.png",J="/assets/image-20221204002040184-456918f2.png",B="/assets/image-20221204002306288-b443ac52.png",H="/assets/image-20221204172339375-743584a6.png",U="/assets/image-20221204172705426-1650b07f.png",N="/assets/image-20221204174052622-7ae64fc6.png",G="/assets/image-20221204174537686-114956f7.png",K="/assets/image-20221204180946963-e0488e84.png",X="/assets/image-20221204180744084-3042f357.png",F="/assets/image-20221204185928260-f88b2ab4.png",V="/assets/image-20221204182828547-1bd4cd41.png",W="/assets/image-20221204183044848-34696584.png",Q="/assets/image-20221204184313822-02810468.png",Y="/assets/image-20221204190341389-9ded84bf.png",e="/assets/image-20221204185455556-a8480ef1.png",Z="/assets/image-20221204190712411-3786aebb.png",$="/assets/image-20221204191650390-d2a3a66f.png",nn="/assets/image-20221204193837678-a9f52c64.png",sn="/assets/image-20221204194207812-ac42fdda.png",an="/assets/image-20221204195812200-66b5e56c.png",tn="/assets/image-20221204201342490-8ad94be6.png",pn="/assets/image-20221204202531571-caa6d2dd.png",en="/assets/image-20221204203904900-386bb25b.png",on="/assets/image-20220828215549593-196e2f89.png",cn="/assets/image-20221204204916033-226a31c8.png",ln="/assets/image-20221204205328069-9b2d1abd.png",un="/assets/image-20221204212807207-45a4a26a.png",rn="/assets/image-20221204213328034-f96260f0.png",kn="/assets/image-20221204213859112-28251881.png",dn="/assets/image-20221204221320230-a9023eb7.png",mn="/assets/image-20221204222650873-499a4399.png",vn="/assets/image-20221204223602694-a4cb20ed.png",gn="/assets/image-20221204223815554-61cba9ba.png",bn="/assets/image-20221204224643683-ae70945c.png",fn="/assets/image-20221204225437297-66c62cb8.png",yn="/assets/image-20221204225815624-7346056e.png",hn="/assets/image-20221204232154445-2d979e9d.png",qn="/assets/image-20221204231616724-3b928b8a.png",wn="/assets/image-20221204232501679-3535c437.png",_n="/assets/image-20221204233333606-bc10834b.png",xn="/assets/image-20221204233637735-0f40f56f.png",Sn={},jn=a('<h1 id="springboot请求响应" tabindex="-1"><a class="header-anchor" href="#springboot请求响应" aria-hidden="true">#</a> SpringBoot请求响应</h1><figure><img src="'+u+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>SpringBoot进行web程序开发时，内置了一个核心的Servlet程序 DispatcherServlet，称之为<code>核心控制器</code><br> DispatcherServlet 负责接收页面发送的请求，然后根据执行的规则，将请求再转发给后面的请求处理器Controller，请求处理器处理完请求之后，最终再由DispatcherServlet给浏览器响应数据。</p><figure><img src="'+r+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请求到达Tomcat之后，Tomcat会负责解析这些请求数据，解析后的请求数据会传递给Servlet程序的 HttpServletRequest 对象，也意味着 HttpServletRequest 对象就可以获取到请求数据。 而Tomcat，还给Servlet程序传递了一个参数 HttpServletResponse，通过这个对象，可以给浏览器设置响应数据 。</p><figure><img src="'+k+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>• BS架构：Browser/Server，浏览器/服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。</p><h2 id="_1-请求" tabindex="-1"><a class="header-anchor" href="#_1-请求" aria-hidden="true">#</a> 1. 请求</h2><h3 id="_1-1-postman" tabindex="-1"><a class="header-anchor" href="#_1-1-postman" aria-hidden="true">#</a> 1.1 Postman</h3><p>一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。</p><blockquote><p>Postman原是Chrome浏览器的插件，可以模拟浏览器向后端服务器发起任何形式(如:get、post)的HTTP请求</p><p>使用Postman还可以在发起请求时，携带一些请求参数、请求头等信息</p></blockquote><p><strong>作用</strong>：常用于进行接口测试</p><p><strong>特征</strong>：简单、实用、美观、大方</p><h3 id="_1-2-简单参数" tabindex="-1"><a class="header-anchor" href="#_1-2-简单参数" aria-hidden="true">#</a> 1.2 简单参数</h3><figure><img src="'+m+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">如何接收传递过来的普通参数数据呢？</p><ol><li>原始方式</li><li>SpringBoot方式</li></ol></div><h4 id="_1-2-1-原始方式" tabindex="-1"><a class="header-anchor" href="#_1-2-1-原始方式" aria-hidden="true">#</a> 1.2.1 原始方式</h4><p>在原始的Web程序当中，需要通过Servlet中提供的API：HttpServletRequest（请求对象），获取请求的相关信息。</p><blockquote><p>Tomcat接收到http请求时：把请求的相关信息封装到HttpServletRequest对象中</p></blockquote><p>Controller获取Request对象，直接在方法的形参中声明 HttpServletRequest 对象</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//根据指定的参数名获取请求参数的数据值</span>
String  request.getParameter(<span class="token string">&quot;参数名&quot;</span>)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//原始方式</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/simpleParam&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">simpleParam</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span>
        <span class="token comment">// 请求参数： name=Tom&amp;age=10   （有2个请求参数）</span>
        <span class="token comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span>
        <span class="token comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span>

        <span class="token class-name">String</span> name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name就是请求参数名</span>
        <span class="token class-name">String</span> ageStr <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//age就是请求参数名</span>

        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ageStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要手动进行类型转换</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;  :  &quot;</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>仅做了解</p></blockquote><h4 id="_1-2-2-springboot方式" tabindex="-1"><a class="header-anchor" href="#_1-2-2-springboot方式" aria-hidden="true">#</a> 1.2.2 SpringBoot方式</h4><p>在Springboot的环境中，对原始的API进行了封装，接收参数的形式更加简单。<br> 如果是简单参数，参数名与形参变量名相同，定义同名的形参即可接收参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span>
    <span class="token comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span>
    <span class="token comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/simpleParam&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">simpleParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token punctuation">,</span> <span class="token class-name">Integer</span> age <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//形参名和请求参数名保持一致</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;  :  &quot;</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>postman测试( GET 请求)：</strong></p><figure><img src="`+v+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>postman测试( POST请求 )：</strong></p><figure><img src="'+g+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>结论：不论是GET请求还是POST请求，对于简单参数来讲，只要保证<strong>请求参数名和Controller方法中的形参名保持一致</strong>，就可以获取到请求参数中的数据值。</p></blockquote><h4 id="_1-2-3-参数名不一致" tabindex="-1"><a class="header-anchor" href="#_1-2-3-参数名不一致" aria-hidden="true">#</a> 1.2.3 参数名不一致</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span>
    <span class="token comment">// 请求参数名：name</span>

    <span class="token comment">//springboot方式</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/simpleParam&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">simpleParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> username <span class="token punctuation">,</span> <span class="token class-name">Integer</span> age <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//请求参数名和形参名不相同</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">&quot;  :  &quot;</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后controller方法中的username值为null，age值为20</p><div class="hint-container tip"><p class="hint-container-title">结论</p><p>请求参数名和controller方法中的形参名不一致时，无法接收到请求数据</p></div><p>解决方案：在方法形参前面加上 @RequestParam 注解然后通过value属性执行请求参数名，从而完成映射</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span>
    <span class="token comment">// 请求参数名：name</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/simpleParam&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">simpleParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username <span class="token punctuation">,</span> <span class="token class-name">Integer</span> age <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">&quot;  :  &quot;</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意事项：</strong></p><p>@RequestParam中的required属性默认为true，代表该请求参数必须传递，如果不传递将报错</p><figure><img src="`+b+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果该参数是可选的，可以将required属性设置为false</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/simpleParam&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">simpleParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_1-3-实体参数" tabindex="-1"><a class="header-anchor" href="#_1-3-实体参数" aria-hidden="true">#</a> 1.3 实体参数</h3><p>将请求参数封装到一个实体类对象中，完成数据封装需要<strong>请求参数名与实体类的属性名相同</strong></p><figure><img src="`+f+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-3-1-简单实体对象" tabindex="-1"><a class="header-anchor" href="#_1-3-1-简单实体对象" aria-hidden="true">#</a> 1.3.1 简单实体对象</h4><p>定义POJO实体类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Controller方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//实体参数：简单实体对象</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/simplePojo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">simplePojo</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Postman测试：</p><ul><li>参数名和实体类属性名一致时</li></ul><figure><img src="`+y+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>参数名和实体类属性名不一致时</li></ul><figure><img src="'+h+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-3-2-复杂实体对象" tabindex="-1"><a class="header-anchor" href="#_1-3-2-复杂实体对象" aria-hidden="true">#</a> 1.3.2 复杂实体对象</h4><p>在实体类中有一个或多个属性，也是实体对象类型的</p><ul><li>User类中有一个Address类型的属性（Address是一个实体类）</li></ul><figure><img src="'+q+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>复杂实体对象的封装，需要遵守如下规则：</p><p><strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数。</strong></p><p>定义POJO实体类：</p><ul><li>Address实体类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> province<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token class-name">String</span> province<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>province <span class="token operator">=</span> province<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> city<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCity</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Address{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;province=&#39;&quot;</span> <span class="token operator">+</span> province <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, city=&#39;&quot;</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>User实体类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span> <span class="token comment">//地址对象</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                <span class="token string">&quot;, address=&quot;</span> <span class="token operator">+</span> address <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Controller方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//实体参数：复杂实体对象</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/complexPojo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">complexPojo</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Postman测试：</p><figure><img src="`+w+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-4-数组集合参数" tabindex="-1"><a class="header-anchor" href="#_1-4-数组集合参数" aria-hidden="true">#</a> 1.4 数组集合参数</h3><p>使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值</p><figure><img src="'+_+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>多个值是怎么提交的呢？多个值也是一个一个的提交</p><figure><img src="'+x+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>后端程序接收上述多个值的方式有两种：</p><ol><li>数组</li><li>集合</li></ol><h4 id="_1-4-1-数组" tabindex="-1"><a class="header-anchor" href="#_1-4-1-数组" aria-hidden="true">#</a> 1.4.1 数组</h4><p>数组参数：<strong>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></p><figure><img src="'+S+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Controller方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//数组集合参数</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/arrayParam&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">arrayParam</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Postman测试：</p><p>在前端请求时，有两种传递形式：</p><p>方式一： xxxxxxxxxx?hobby=game&amp;hobby=java</p><figure><img src="`+j+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>方式二：xxxxxxxxxxxxx?hobby=game,java</p><figure><img src="'+C+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-4-2-集合" tabindex="-1"><a class="header-anchor" href="#_1-4-2-集合" aria-hidden="true">#</a> 1.4.2 集合</h4><p>集合参数：<strong>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</strong></p><blockquote><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p></blockquote><figure><img src="'+R+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Controller方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//数组集合参数</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/listParam&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">listParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobby<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Postman测试：</p><p>方式一： xxxxxxxxxx?hobby=game&amp;hobby=java</p><figure><img src="`+E+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>方式二：xxxxxxxxxxxxx?hobby=game,java</p><figure><img src="'+P+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-5-日期参数" tabindex="-1"><a class="header-anchor" href="#_1-5-日期参数" aria-hidden="true">#</a> 1.5 日期参数</h3><figure><img src="'+O+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>日期的格式多种多样（如：2022-12-12 10:05:45 、2022/12/12 10:05:45），对于日期类型的参数在进行封装的时候，需要通过 @DateTimeFormat 注解，以及其pattern属性来设置日期的格式。</p><figure><img src="'+z+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递</li><li>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数</li></ul><p>Controller方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//日期时间参数</span>
   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/dateParam&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dateParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Postman测试：</p><figure><img src="`+A+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-6-json参数" tabindex="-1"><a class="header-anchor" href="#_1-6-json参数" aria-hidden="true">#</a> 1.6 JSON参数</h3><ol><li>Postman在发送请求时，如何传递json格式的请求参数</li><li>在服务端的controller方法中，如何接收json格式的请求参数</li></ol><p>Postman发送JSON格式数据：</p><figure><img src="'+I+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>服务端Controller方法接收JSON格式数据：</p><ul><li>传递json格式的参数，在Controller中会使用实体类进行封装。</li><li>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody 标识</strong></li></ul><figure><img src="'+L+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</p></blockquote><p>实体类：Address</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    
    <span class="token comment">//省略GET , SET 方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实体类：User</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
    
    <span class="token comment">//省略GET , SET 方法</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Controller方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//JSON参数</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/jsonParam&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">jsonParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Postman测试：</p><figure><img src="`+D+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-7-路径参数" tabindex="-1"><a class="header-anchor" href="#_1-7-路径参数" aria-hidden="true">#</a> 1.7 路径参数</h3><p>传统的开发中请求参数是放在请求体(POST请求)传递 或 跟在URL后面通过?key=value的形式传递(GET请求)。</p><figure><img src="'+T+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在的开发中经常还会直接在请求的URL中传递参数</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>http://localhost:8080/user/1
http://localhost:880/user/1/0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>路径参数：</p><ul><li>前端：通过请求URL直接传递参数</li><li>后端：使用{…}来标识该路径参数，需要使用 @PathVariable 获取路径参数</li></ul><figure><img src="`+M+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Controller方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//路径参数</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/path/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pathParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Postman测试：</p><figure><img src="`+J+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>传递多个路径参数：</strong></p><p>Postman测试：</p><figure><img src="'+B+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Controller方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>
    <span class="token comment">//路径参数</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/path/{id}/{name}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pathParam2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-响应" tabindex="-1"><a class="header-anchor" href="#_2-响应" aria-hidden="true">#</a> 2. 响应</h2><p>HTTL协议的交互方式：<strong>请求响应模式（有请求就有响应）</strong></p><h3 id="_2-1-responsebody" tabindex="-1"><a class="header-anchor" href="#_2-1-responsebody" aria-hidden="true">#</a> 2.1 @ResponseBody</h3><p>controller方法中的return的结果，怎么就可以响应给浏览器呢？</p><p>答案：使用@ResponseBody注解</p><div class="hint-container tip"><p class="hint-container-title">@ResponseBody注解</p><p>类型：方法注解、类注解</p><p>位置：书写在Controller方法上或类上</p><p>作用：将方法返回值直接响应给浏览器</p><ul><li>如果返回值类型是实体对象/集合，将会转换为JSON格式后再响应给浏览器</li></ul></div><p>在所书写的Controller中，只在类上添加了@RestController注解、方法添加了@RequestMapping注解，并没有使用@ResponseBody注解，怎么给浏览器响应呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World ~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello World ~&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因：在类上添加的@RestController注解，是一个组合注解。</p><ul><li>@RestController = @Controller + @ResponseBody</li></ul><p>@RestController源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">//元注解（修饰注解的注解）</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>  <span class="token comment">//元注解</span>
<span class="token annotation punctuation">@Documented</span>    <span class="token comment">//元注解</span>
<span class="token annotation punctuation">@Controller</span>   
<span class="token annotation punctuation">@ResponseBody</span> 
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>
        annotation <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span>
    <span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结论</strong>：在类上添加@RestController就相当于添加了@ResponseBody注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseController</span> <span class="token punctuation">{</span>
    <span class="token comment">//响应字符串</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World ~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello World ~&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//响应实体对象</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/getAddr&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Address</span> addr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建实体类对象</span>
        addr<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token string">&quot;广东&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;深圳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> addr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//响应集合数据</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/listAddr&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> <span class="token function">listAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//集合对象</span>
        
        <span class="token class-name">Address</span> addr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token string">&quot;广东&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;深圳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Address</span> addr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr2<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token string">&quot;陕西&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr2<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;西安&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试效果如下：</p><figure><img src="`+H+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+U+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-统一响应结果" tabindex="-1"><a class="header-anchor" href="#_2-2-统一响应结果" aria-hidden="true">#</a> 2.2 统一响应结果</h3><figure><img src="'+N+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>真实的项目开发中，无论是哪种方法，都会定义一个统一的返回结果</p><figure><img src="'+G+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>前端：只需要按照统一格式的返回结果进行解析(仅一种解析方案)，就可以拿到数据。</p></blockquote><p>统一的返回结果使用类来描述，在这个结果中包含：</p><ul><li><p>响应状态码：当前请求是成功，还是失败</p></li><li><p>状态码信息：给页面的提示信息</p></li><li><p>返回的数据：给前端响应的数据（字符串、对象、集合）</p></li></ul><p>定义在一个实体类Result来包含以上信息，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span><span class="token comment">//响应码，1 代表成功; 0 代表失败</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>  <span class="token comment">//响应码 描述字符串</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span> <span class="token comment">//返回的数据</span>

    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//增删改 成功响应(不需要给前端返回数据)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//失败响应</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造Controller：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseController</span> <span class="token punctuation">{</span> 
    <span class="token comment">//响应统一格式的结果</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World ~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World ~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//响应统一格式的结果</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/getAddr&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Address</span> addr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token string">&quot;广东&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;深圳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//响应统一格式的结果</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/listAddr&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">listAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Address</span> addr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token string">&quot;广东&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;深圳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Address</span> addr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr2<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token string">&quot;陕西&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr2<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;西安&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Postman测试：</p><figure><img src="`+K+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+X+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-3-案例" tabindex="-1"><a class="header-anchor" href="#_2-3-案例" aria-hidden="true">#</a> 2.3 案例</h3><h4 id="_2-3-1-需求说明" tabindex="-1"><a class="header-anchor" href="#_2-3-1-需求说明" aria-hidden="true">#</a> 2.3.1 需求说明</h4><p>需求：加载并解析xml文件中的数据，完成数据处理，并在页面展示</p><figure><img src="'+F+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-3-2-准备工作" tabindex="-1"><a class="header-anchor" href="#_2-3-2-准备工作" aria-hidden="true">#</a> 2.3.2 准备工作</h4><ol><li>XML文件</li><li>工具类</li><li>前端页面资源</li></ol><blockquote><p>在SpringBoot项目中，静态资源(html，css，js等前端资源)默认可以存放的目录：</p><ul><li>classpath:/static/</li><li>classpath:/public/</li><li>classpath:/resources/</li><li>classpath:/META-INF/resources/</li></ul><p>classpath：</p><ul><li>代表的是类路径，在maven的项目中，其实指的就是 src/main/resources 或者 src/main/java，但是java目录是存放java代码的，所以相关的配置文件及静态资源文档，就放在 src/main/resources下。</li></ul></blockquote><h4 id="_2-3-3-实现步骤" tabindex="-1"><a class="header-anchor" href="#_2-3-3-实现步骤" aria-hidden="true">#</a> 2.3.3 实现步骤</h4><ol><li><p>在pom.xml文件中引入dom4j的依赖，用于解析XML文件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解析XML的工具类XMLParserUtils、实体类Emp、XML文件emp.xml</p><figure><img src="`+V+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>引入资料中提供的静态页面文件，放在resources下的static目录下</p><figure><img src="'+W+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>创建EmpController类，编写Controller程序，处理请求，响应数据</p><figure><img src="'+Q+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><h4 id="_2-3-4-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-3-4-代码实现" aria-hidden="true">#</a> 2.3.4 代码实现</h4><p>Contriller代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/listEmp&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//1. 加载并解析emp.xml</span>
        <span class="token class-name">String</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;emp.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//System.out.println(file);</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> <span class="token class-name">XmlParserUtils</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">Emp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2. 对数据进行转换处理 - gender, job</span>
        empList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>emp <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//处理 gender 1: 男, 2: 女</span>
            <span class="token class-name">String</span> gender <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span>
            <span class="token class-name">String</span> job <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;讲师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;班主任&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;就业指导&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. 响应数据</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>empList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统一返回结果实体类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code <span class="token punctuation">;</span><span class="token comment">//1 成功 , 0 失败</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span> <span class="token comment">//提示信息</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span> <span class="token comment">//数据 date</span>

    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-5-测试" tabindex="-1"><a class="header-anchor" href="#_2-3-5-测试" aria-hidden="true">#</a> 2.3.5 测试</h4><figure><img src="`+Y+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure>',185),Cn={href:"http://localhost:8080/emp.html",target:"_blank",rel:"noopener noreferrer"},Rn=a('<figure><img src="'+e+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-3-6-问题分析" tabindex="-1"><a class="header-anchor" href="#_2-3-6-问题分析" aria-hidden="true">#</a> 2.3.6 问题分析</h4><p>案例中：解析XML数据，获取数据的代码，处理数据的逻辑的代码，给页面响应的代码全部都堆积在一起了，全部都写在controller方法中了</p><figure><img src="'+Z+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>当我们要修改操作数据部分的代码，需要改动Controller</p></li><li><p>当我们要完善逻辑处理部分的代码，需要改动Controller</p></li><li><p>当我们需要修改数据响应的代码，还是需要改动Controller</p></li></ul><h2 id="_3-分层解耦" tabindex="-1"><a class="header-anchor" href="#_3-分层解耦" aria-hidden="true">#</a> 3. 分层解耦</h2><h3 id="_3-1-三层架构" tabindex="-1"><a class="header-anchor" href="#_3-1-三层架构" aria-hidden="true">#</a> 3.1 三层架构</h3><h4 id="_3-1-1-介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-1-介绍" aria-hidden="true">#</a> 3.1.1 介绍</h4><blockquote><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote><figure><img src="'+$+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作</li><li>逻辑处理：负责业务逻辑处理的代码</li><li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据</li></ul><figure><img src="'+nn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>基于三层架构的程序执行流程：</p><figure><img src="'+sn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li><li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li><li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li><li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li></ul><h4 id="_3-1-2-代码拆分" tabindex="-1"><a class="header-anchor" href="#_3-1-2-代码拆分" aria-hidden="true">#</a> 3.1.2 代码拆分</h4><ul><li>控制层包名：xxxx.controller</li><li>业务逻辑层包名：xxxx.service</li><li>数据访问层包名：xxxx.dao</li></ul><figure><img src="'+an+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>控制层：</strong> 接收前端发送的请求，对请求进行处理，并响应数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>
    <span class="token comment">//业务层对象</span>
    <span class="token keyword">private</span> <span class="token class-name">EmpService</span> empService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpServiceA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/listEmp&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//1. 调用service层, 获取数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3. 响应数据</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>empList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>业务逻辑层：</strong> 处理具体的业务逻辑</p><ul><li>业务接口</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//业务逻辑接口（制定业务标准）</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取员工列表</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> <span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>业务实现类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//业务逻辑实现类（按照业务标准实现）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceA</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>
    <span class="token comment">//dao层对象</span>
    <span class="token keyword">private</span> <span class="token class-name">EmpDao</span> empDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpDaoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> <span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 调用dao, 获取数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> empDao<span class="token punctuation">.</span><span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2. 对数据进行转换处理 - gender, job</span>
        empList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>emp <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//处理 gender 1: 男, 2: 女</span>
            <span class="token class-name">String</span> gender <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span>
            <span class="token class-name">String</span> job <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;讲师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;班主任&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;就业指导&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> empList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数据访问层：</strong> 负责数据的访问操作，包含数据的增、删、改、查</p><ul><li>数据访问接口</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//数据访问层接口（制定标准）</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpDao</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取员工列表数据</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> <span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数据访问实现类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//数据访问实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpDaoA</span> <span class="token keyword">implements</span> <span class="token class-name">EmpDao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> <span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 加载并解析emp.xml</span>
        <span class="token class-name">String</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;emp.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> <span class="token class-name">XmlParserUtils</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">Emp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> empList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+tn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">三层架构的好处</p><ol><li>复用性强</li><li>便于维护</li><li>利用扩展</li></ol></div><h3 id="_3-2-分层解耦" tabindex="-1"><a class="header-anchor" href="#_3-2-分层解耦" aria-hidden="true">#</a> 3.2 分层解耦</h3><h4 id="_3-2-1-耦合问题" tabindex="-1"><a class="header-anchor" href="#_3-2-1-耦合问题" aria-hidden="true">#</a> 3.2.1 耦合问题</h4><div class="hint-container info"><p class="hint-container-title">软件开发涉及到的两个概念：内聚和耦合</p><ul><li><p>内聚：软件中各个功能模块内部的功能联系。</p></li><li><p>耦合：衡量软件中各个层/模块之间的依赖、关联的程度。</p></li></ul></div><p><strong>软件设计原则：高内聚低耦合。</strong></p><blockquote><p>高内聚指的是：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 &quot;高内聚&quot;。</p><p>低耦合指的是：软件中各个层、模块之间的依赖关联程序越低越好。</p></blockquote><p>程序中高内聚的体现：</p><ul><li>EmpServiceA类中只编写了和员工相关的逻辑处理代码</li></ul><figure><img src="'+pn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>程序中耦合代码的体现：</p><ul><li>把业务类变为EmpServiceB时，需要修改controller层中的代码</li></ul><figure><img src="'+en+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>高内聚、低耦合的目的是使程序模块的可重用性、移植性大大增强。</p><figure><img src="'+on+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-2-2-解耦思路" tabindex="-1"><a class="header-anchor" href="#_3-2-2-解耦思路" aria-hidden="true">#</a> 3.2.2 解耦思路</h4><figure><img src="'+cn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>怎么解耦呢？</p><ul><li>首先不能在EmpController中使用new对象。代码如下：</li></ul><figure><img src="'+ln+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>不能new，就意味着没有业务层对象（程序运行就报错），怎么办呢？</li></ul><div class="hint-container tip"><p class="hint-container-title">解决思路</p><ul><li><p>提供一个容器，容器中存储一些对象(例：EmpService对象)</p></li><li><p>controller程序从容器中获取EmpService类型的对象</p></li></ul></div><p>想要实现上述解耦操作，涉及Spring中的两个核心概念：</p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><blockquote><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><blockquote><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p><p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote></li></ul><p>IOC容器中创建、管理的对象，称之为：bean对象</p><h3 id="_3-3-ioc-di" tabindex="-1"><a class="header-anchor" href="#_3-3-ioc-di" aria-hidden="true">#</a> 3.3 IOC&amp;DI</h3><h4 id="_3-3-1-ioc-di入门" tabindex="-1"><a class="header-anchor" href="#_3-3-1-ioc-di入门" aria-hidden="true">#</a> 3.3.1 IOC&amp;DI入门</h4><p>完成Controller层、Service层、Dao层的代码解耦</p><div class="hint-container tip"><p class="hint-container-title">思路</p><ol><li>删除Controller层、Service层中new对象的代码</li><li>Service层及Dao层的实现类，交给IOC容器管理</li><li>为Controller及Service注入运行时依赖的对象 <ul><li>Controller程序中注入依赖的Service层对象</li><li>Service程序中注入依赖的Dao层对象</li></ul></li></ol></div><p>第1步：删除Controller层、Service层中new对象的代码</p><figure><img src="'+un+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第2步：Service层及Dao层的实现类，交给IOC容器管理</p><ul><li>使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</li></ul><figure><img src="'+rn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第3步：为Controller及Service注入运行时依赖的对象</p><ul><li>使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</li></ul><figure><img src="'+kn+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>完整的三层代码：</p><ul><li><strong>Controller层：</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span>
    <span class="token keyword">private</span> <span class="token class-name">EmpService</span> empService <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/listEmp&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//1. 调用service, 获取数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3. 响应数据</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>empList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Service层：</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceA</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span>
    <span class="token keyword">private</span> <span class="token class-name">EmpDao</span> empDao <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> <span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 调用dao, 获取数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> empDao<span class="token punctuation">.</span><span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2. 对数据进行转换处理 - gender, job</span>
        empList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>emp <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//处理 gender 1: 男, 2: 女</span>
            <span class="token class-name">String</span> gender <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span>
            <span class="token class-name">String</span> job <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;讲师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;班主任&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;就业指导&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> empList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dao层：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpDaoA</span> <span class="token keyword">implements</span> <span class="token class-name">EmpDao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> <span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 加载并解析emp.xml</span>
        <span class="token class-name">String</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;emp.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> <span class="token class-name">XmlParserUtils</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">Emp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> empList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行测试：</p>`,76),En={href:"http://localhost:8080/emp.html",target:"_blank",rel:"noopener noreferrer"},Pn=a('<figure><img src="'+e+`" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3-2-ioc详解" tabindex="-1"><a class="header-anchor" href="#_3-3-2-ioc详解" aria-hidden="true">#</a> 3.3.2 IOC详解</h4><div class="hint-container tip"><p class="hint-container-title">IOC控制反转</p><p>就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象</p><p>IOC容器创建的对象称为bean对象</p></div><p>要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component</p><p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p><ul><li>@Controller （标注在控制层类上）</li><li>@Service （标注在业务层类上）</li><li>@Repository （标注在数据访问层类上）</li></ul><p>修改入门案例代码：</p><ul><li><strong>Controller层：</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>  <span class="token comment">//@RestController = @Controller + @ResponseBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span>
    <span class="token keyword">private</span> <span class="token class-name">EmpService</span> empService <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/listEmp&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//1. 调用service, 获取数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3. 响应数据</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>empList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Service层：</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpServiceA</span> <span class="token keyword">implements</span> <span class="token class-name">EmpService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span>
    <span class="token keyword">private</span> <span class="token class-name">EmpDao</span> empDao <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> <span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 调用dao, 获取数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> empDao<span class="token punctuation">.</span><span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2. 对数据进行转换处理 - gender, job</span>
        empList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>emp <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//处理 gender 1: 男, 2: 女</span>
            <span class="token class-name">String</span> gender <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span>
            <span class="token class-name">String</span> job <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">getJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;讲师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;班主任&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                emp<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">&quot;就业指导&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> empList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dao层：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpDaoA</span> <span class="token keyword">implements</span> <span class="token class-name">EmpDao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> <span class="token function">listEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 加载并解析emp.xml</span>
        <span class="token class-name">String</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;emp.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> empList <span class="token operator">=</span> <span class="token class-name">XmlParserUtils</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">Emp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> empList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th style="text-align:left;">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td style="text-align:left;">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td style="text-align:left;">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td style="text-align:left;">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr><tr><td style="text-align:left;">@Component</td><td>声明bean的基础注解</td><td>不属于以上三类时，用此注解</td></tr></tbody></table><blockquote><p>查看源码：<img src="`+dn+'" alt=" " loading="lazy"></p></blockquote><p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p><figure><img src="'+mn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>注意事项:</p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li></ul></blockquote><p>组件扫描:</p><p>问题：使用前面的四个注解声明的bean，一定会生效吗？</p><p>答案：不一定。（原因：bean想要生效，还需要被组件扫描）</p><p>下面通过修改项目工程的目录结构，来测试bean对象是否生效：</p><figure><img src="'+vn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>运行程序后，报错：</p><figure><img src="'+gn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为什么没有找到bean对象呢？</p><ul><li>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</li></ul><blockquote><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>。</p><figure><img src="'+bn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><p>解决方案：手动添加@ComponentScan注解，指定要扫描的包（仅做了解，不推荐）</p><figure><img src="'+fn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>推荐做法：</p><ul><li>将定义的controller，service，dao这些包都放在引导类所在包com.itheima的子包下，定义的bean就会被自动的扫描到</li></ul><figure><img src="'+yn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3-3-di详解" tabindex="-1"><a class="header-anchor" href="#_3-3-3-di详解" aria-hidden="true">#</a> 3.3.3 DI详解</h4><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><p>Autowired翻译过来叫：自动装配。</p><p>@Autowired注解，默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</p><blockquote><p>入门程序举例：在EmpController运行的时候，就要到IOC容器当中去查找EmpService这个类型的对象，而IOC容器中刚好有一个EmpService这个类型的对象，所以就找到了这个类型的对象完成注入操作。</p></blockquote><p>那如果在IOC容器中，存在多个相同类型的bean对象，会出现什么情况呢？</p><figure><img src="'+hn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>程序运行会报错</li></ul><figure><img src="'+qn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如何解决上述问题呢？Spring提供了以下几种解决方案：</p><ul><li><p>@Primary</p></li><li><p>@Qualifier</p></li><li><p>@Resource</p></li></ul><p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p><figure><img src="'+wn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p><ul><li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li></ul><figure><img src="'+_n+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p><figure><img src="'+xn+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>面试题 ： @Autowird 与 @Resource的区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li></ul></blockquote>',53);function On(zn,An){const t=c("ExternalLinkIcon");return i(),l("div",null,[jn,n("p",null,[s("打开浏览器，在浏览器地址栏输入： "),n("a",Cn,[s("http://localhost:8080/emp.html"),p(t)])]),Rn,n("ul",null,[n("li",null,[s("启动SpringBoot引导类，打开浏览器，输入："),n("a",En,[s("http://localhost:8080/emp.html"),p(t)])])]),Pn])}const Dn=o(Sn,[["render",On],["__file","springboot01.html.vue"]]);export{Dn as default};
